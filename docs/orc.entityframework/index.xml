<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Orc.EntityFramework on WildGums open source center</title><link>https://opensource.wildgums.com/orc.entityframework/</link><description>Recent content in Orc.EntityFramework on WildGums open source center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://opensource.wildgums.com/orc.entityframework/index.xml" rel="self" type="application/rss+xml"/><item><title>Using the DbContextManager</title><link>https://opensource.wildgums.com/orc.entityframework/using-the-dbcontextmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.wildgums.com/orc.entityframework/using-the-dbcontextmanager/</guid><description>The DbContextManager class allows the sharing of DbContext (with underlying ObjectContext) classes in Entity Framework. The good thing about this is that the same context can be used in the same scope without having to recreate the same type of the same context over and over again.
A very good example of this scoping is an ASP.NET (MVC) application where a context is normally shared throughout the whole thread that handles a request.</description></item><item><title>Using the repositories and unit of work</title><link>https://opensource.wildgums.com/orc.entityframework/using-the-repositories-and-unit-of-work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.wildgums.com/orc.entityframework/using-the-repositories-and-unit-of-work/</guid><description>The Repository and Unit of Work (UoW) pattern are very useful patterns to create an abstraction level over the DbContext that is provided by Entity Framework. A much heard excuse not to use repositories is that EF itself already works with repositories (the DbContext) and a UoW (in the SaveChanges method). Below are a few examples why it is a good thing to create repositories:
Abstract away some of the more complex features of Entity Framework that the end-developer should not be bothered with Hide the actual DbContext (make it internal) to prevent misuse Keep security checks and saving and rollback in a single location Force the use of the Specification pattern on queries Note that repositories and UoW should not be used to abstract away the ORM tool because that is just another abstraction layer which is not required.</description></item><item><title>Using stored procedures and functions</title><link>https://opensource.wildgums.com/orc.entityframework/using-stored-procedures-and-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.wildgums.com/orc.entityframework/using-stored-procedures-and-functions/</guid><description>Sometimes it&amp;rsquo;s required to use stored procedures or functions. This is still possible with Catel. Below is an example on how to call a stored procedure:
using (var dbContextManager = DbContextManager&amp;lt;MyEntities&amp;gt;.GetManager()) { var dbContext = dbContextManager.DbContext; var result = dbContext.Database.SqlQuery&amp;lt;ReturnType&amp;gt;(&amp;quot;storedProcedureName&amp;quot;, params); }</description></item><item><title>Using the ModelBase as base class for code-first entities</title><link>https://opensource.wildgums.com/orc.entityframework/using-the-modelbase-as-base-class-for-code-first-entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://opensource.wildgums.com/orc.entityframework/using-the-modelbase-as-base-class-for-code-first-entities/</guid><description>The ModelBase provides lots of functionality such as change tracking, property notifications and validation. It is possible to use this in code first. To do so, derive the entities from the ModelBase class as shown in the example below:
[Table(&amp;quot;person&amp;quot;)] public partial class Person : ModelBase { [StringLength(50)] public string FirstName { get; set; } [StringLength(50)] public string lastname { get; set; } public long PersonId { get; set; } public long FamilyId { get; set; } public virtual Family Family { get; set; } } In the context, add additional initialization code to ignore the Catel properties on the ModelBase class:</description></item></channel></rss>