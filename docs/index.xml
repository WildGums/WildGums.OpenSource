<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WildGums open source center</title>
    <link>http://opensource.wildgums.com/</link>
    <description>Recent content on WildGums open source center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://opensource.wildgums.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using the DbContextManager</title>
      <link>http://opensource.wildgums.com/orc.entityframework/using-the-dbcontextmanager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.entityframework/using-the-dbcontextmanager/</guid>
      <description>The DbContextManager class allows the sharing of DbContext (with underlying ObjectContext) classes in Entity Framework. The good thing about this is that the same context can be used in the same scope without having to recreate the same type of the same context over and over again.
A very good example of this scoping is an ASP.NET (MVC) application where a context is normally shared throughout the whole thread that handles a request.</description>
    </item>
    
    <item>
      <title>Using the bootstrapper</title>
      <link>http://opensource.wildgums.com/orc.prism/using-the-bootstrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.prism/using-the-bootstrapper/</guid>
      <description>Orc.Prism offers a basic bootstrapper that uses the ServiceLocator as IoC container. This way, it is really simple to create a prism application using Catel and prism.
The bootstrapper takes lots of work out of hands, and this way a developer can simply focus on what must be done in the bootstrapper (such as registering the right module catalog).
Using the bootstrapper This example shows how the bootstrapper is used to define both the shell and the module catalog that looks for modules in the Modules directory of the application root.</description>
    </item>
    
    <item>
      <title>Using the repositories and unit of work</title>
      <link>http://opensource.wildgums.com/orc.entityframework/using-the-repositories-and-unit-of-work/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.entityframework/using-the-repositories-and-unit-of-work/</guid>
      <description>The Repository and Unit of Work (UoW) pattern are very useful patterns to create an abstraction level over the DbContext that is provided by Entity Framework. A much heard excuse not to use repositories is that EF itself already works with repositories (the DbContext) and a UoW (in the SaveChanges method). Below are a few examples why it is a good thing to create repositories:
 Abstract away some of the more complex features of Entity Framework that the end-developer should not be bothered with Hide the actual DbContext (make it internal) to prevent misuse Keep security checks and saving and rollback in a single location Force the use of the Specification pattern on queries  @alert info Note that repositories and UoW should not be used to abstract away the ORM tool because that is just another abstraction layer which is not required.</description>
    </item>
    
    <item>
      <title>Declaring modules</title>
      <link>http://opensource.wildgums.com/orc.prism/declaring-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.prism/declaring-modules/</guid>
      <description>When developing a module in Prism, most of the time you need a base class for all the models that contain the IoC container, IRegionManager and more. To make development with prism and Catel as easy as possible, the ModuleBase is included with Orc.Prism. There are two versions of the ModuleBase available, which are described below.
Generic ModuleBase The generic module base allows the end-developer to decide what IoC container is used.</description>
    </item>
    
    <item>
      <title>Using stored procedures and functions</title>
      <link>http://opensource.wildgums.com/orc.entityframework/using-stored-procedures-and-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.entityframework/using-stored-procedures-and-functions/</guid>
      <description>Sometimes it&amp;rsquo;s required to use stored procedures or functions. This is still possible with Catel. Below is an example on how to call a stored procedure:
using (var dbContextManager = DbContextManager&amp;lt;MyEntities&amp;gt;.GetManager()) { var dbContext = dbContextManager.DbContext; var result = dbContext.Database.SqlQuery&amp;lt;ReturnType&amp;gt;(&amp;quot;storedProcedureName&amp;quot;, params); }  </description>
    </item>
    
    <item>
      <title>Translating or customizing</title>
      <link>http://opensource.wildgums.com/orc.prism/translating-or-customizing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.prism/translating-or-customizing/</guid>
      <description>Starting with version 1.0, it is possible to fully customize the bootstrapper tasks. Orc.Prism now uses the IBootstrapperTaskFactory to create the tasks instead of the bootstrapper itself. To customize the logic, one has to implement his/her own version of the IBootstrapperTaskFactory. The easiest way to do this is to derive from the existing BootstrapperTaskFactory and register it in the service locator before the bootstrapper is created.
Customizing the messages The example below customizes the messages that are shown during the initialization tasks.</description>
    </item>
    
    <item>
      <title>Using the ModelBase as base class for code-first entities</title>
      <link>http://opensource.wildgums.com/orc.entityframework/using-the-modelbase-as-base-class-for-code-first-entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.entityframework/using-the-modelbase-as-base-class-for-code-first-entities/</guid>
      <description>The ModelBase provides lots of functionality such as change tracking, property notifications and validation. It is possible to use this in code first. To do so, derive the entities from the ModelBase class as shown in the example below:
[Table(&amp;quot;person&amp;quot;)] public partial class Person : ModelBase { [StringLength(50)] public string FirstName { get; set; } [StringLength(50)] public string lastname { get; set; } public long PersonId { get; set; } public long FamilyId { get; set; } public virtual Family Family { get; set; } }  In the context, add additional initialization code to ignore the Catel properties on the ModelBase class:</description>
    </item>
    
    <item>
      <title>CompositeModuleCatalog</title>
      <link>http://opensource.wildgums.com/orc.prism/module-catalogs/compositemodulecatalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.prism/module-catalogs/compositemodulecatalog/</guid>
      <description>Initializing the catalog Below is an example of the catalog in action:
protected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); ModuleCatalog.Add(new DirectoryModuleCatalog { ModulePath = @&amp;quot;.\Modules&amp;quot; }); ModuleCatalog.Add(new NuGetBasedModuleCatalog { PackageSource = @&amp;quot;C:\SomeDir\localNugetSource&amp;quot;, AllowPrereleaseVersions = true, IgnoreDependencies = false }); ModuleCatalog.Initialize(); }  Customizing the catalog No customization options documented yet - feel free to contribute</description>
    </item>
    
    <item>
      <title>DownloadingModuleCatalog</title>
      <link>http://opensource.wildgums.com/orc.prism/module-catalogs/downloadingmodulecatalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.prism/module-catalogs/downloadingmodulecatalog/</guid>
      <description>The DownloadingModuleCatalog allow the downloading of all modules dynamically based on the module info.
Initializing the catalog protected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); }  Customizing the catalog No customization options documented yet - feel free to contribute</description>
    </item>
    
    <item>
      <title>NuGetBasedModuleCatalog</title>
      <link>http://opensource.wildgums.com/orc.prism/module-catalogs/nugetbasedmodulecatalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.prism/module-catalogs/nugetbasedmodulecatalog/</guid>
      <description>The NuGetBasedModuleCatalog allows a user to use a NuGet package source as a module source. @alert info Note that the CompositeNuGetBasedModuleCatalog works the same but can combine multiple NuGet sources @end
Initializing the catalog The catalog has several options. Below is an example of a default customization:
protected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); ModuleCatalog.IgnoreDependencies = false; ModuleCatalog.AllowPrereleaseVersions = true; ModuleCatalog.PackageSource = @&amp;quot;https://www.nuget.org/api/v2/&amp;quot;, }  Initializing the composite catalog The composite catalog can be initialized using the code below:</description>
    </item>
    
    <item>
      <title>SafeDirectoryModuleCatalog</title>
      <link>http://opensource.wildgums.com/orc.prism/module-catalogs/safedirectorymodulecatalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/orc.prism/module-catalogs/safedirectorymodulecatalog/</guid>
      <description>The SafeDirectoryModuleCatalog is a safe implementation of the DirectoryModuleCatalog that ships with prism.
Initializing the catalog protected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); ModulePath = @&amp;quot;.\Modules&amp;quot; }  Customizing the catalog No customization options documented yet - feel free to contribute</description>
    </item>
    
    <item>
      <title>footer</title>
      <link>http://opensource.wildgums.com/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/_footer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>header</title>
      <link>http://opensource.wildgums.com/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://opensource.wildgums.com/_header/</guid>
      <description>WildGums open source center</description>
    </item>
    
  </channel>
</rss>