[
{
	"uri": "http://opensource.wildgums.com/orc.entityframework/using-the-dbcontextmanager/",
	"title": "Using the DbContextManager",
	"tags": [],
	"description": "",
	"content": " The DbContextManager class allows the sharing of DbContext (with underlying ObjectContext) classes in Entity Framework. The good thing about this is that the same context can be used in the same scope without having to recreate the same type of the same context over and over again.\nA very good example of this scoping is an ASP.NET (MVC) application where a context is normally shared throughout the whole thread that handles a request. A big advantage of reusing the same instance of a context is that already fetched entities don\u0026rsquo;t need to be refetched over and over again.\nObtaining a DbContext Obtaining a DbContext is very simple by using the DbContextManager.\nusing (var dbContextManager = DbContextManager\u0026lt;MyEntities\u0026gt;.GetManager()) { var dbContext = dbContextManager.DbContext; // TODO: handle logic with dbContext here }  @alert important It is very important to wrap the DbContextManager in a using state because it must be disposed @end Scoping is all done automatically because when a DbContextManager is instantiated, a reference counter is increased. Every time an instance of the DbContextManager is disposed, the reference counter is decreased. When the reference count reaches zero (0), it will dispose the DbContext that it manages.\nSharing a single DbContext per ASP.NET request When a request is started, a context can be created by calling this code:\nDbContextManagerHelper.CreateDbContextForHttpContext\u0026lt;MyEntities\u0026gt;();  When a request is ended, the context can be disposed by using this code:\nDbContextManagerHelper.DisposeDbContextForHttpContext\u0026lt;MyEntities\u0026gt;();  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/using-the-bootstrapper/",
	"title": "Using the bootstrapper",
	"tags": [],
	"description": "",
	"content": " Orc.Prism offers a basic bootstrapper that uses the ServiceLocator as IoC container. This way, it is really simple to create a prism application using Catel and prism.\nThe bootstrapper takes lots of work out of hands, and this way a developer can simply focus on what must be done in the bootstrapper (such as registering the right module catalog).\nUsing the bootstrapper This example shows how the bootstrapper is used to define both the shell and the module catalog that looks for modules in the Modules directory of the application root.\n/// \u0026lt;summary\u0026gt; /// The bootstrapper that will create and run the shell. /// \u0026lt;/summary\u0026gt; public class MyApplicationBootstrapper : BootstrapperBase { /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;MyApplicationBootstrapper\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public MyApplicationBootstrapper() { LogManager.RegisterDebugListener(); } /// \u0026lt;summary\u0026gt; /// Creates the \u0026lt;see cref=\u0026quot;T:Microsoft.Practices.Prism.Modularity.IModuleCatalog\u0026quot;/\u0026gt; used by Prism. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; protected override IModuleCatalog CreateModuleCatalog() { var moduleCatalog = new DirectoryModuleCatalog { ModulePath = @\u0026quot;.\\Modules\u0026quot;}; moduleCatalog.Initialize(); return moduleCatalog; } /// \u0026lt;summary\u0026gt; /// Creates the shell or main window of the application. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt; /// The shell of the application. /// \u0026lt;/returns\u0026gt; protected override DependencyObject CreateShell() { var shell = new MainWindow(); shell.Show(); return shell; } }  Using the bootstrapper with generic shell definition Most of the time, the CreateShell method simple defines the main window, creates it and returns it. This can be automated using Catel as well by using the generic bootstrapper. This way, the bootstrapper stays really small and can be kept very simple.\n/// \u0026lt;summary\u0026gt; /// The bootstrapper that will create and run the shell. /// \u0026lt;/summary\u0026gt; public class MyApplicationBootstrapper : BootstrapperBase\u0026lt;MainWindow\u0026gt; { /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;MyApplicationBootstrapper\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public MyApplicationBootstrapper() { LogManager.RegisterDebugListener(); } /// \u0026lt;summary\u0026gt; /// Creates the \u0026lt;see cref=\u0026quot;T:Microsoft.Practices.Prism.Modularity.IModuleCatalog\u0026quot;/\u0026gt; used by Prism. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; protected override IModuleCatalog CreateModuleCatalog() { var moduleCatalog = new DirectoryModuleCatalog { ModulePath = @\u0026quot;.\\Modules\u0026quot;}; moduleCatalog.Initialize(); return moduleCatalog; } }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.entityframework/using-the-repositories-and-unit-of-work/",
	"title": "Using the repositories and unit of work",
	"tags": [],
	"description": "",
	"content": " The Repository and Unit of Work (UoW) pattern are very useful patterns to create an abstraction level over the DbContext that is provided by Entity Framework. A much heard excuse not to use repositories is that EF itself already works with repositories (the DbContext) and a UoW (in the SaveChanges method). Below are a few examples why it is a good thing to create repositories:\n Abstract away some of the more complex features of Entity Framework that the end-developer should not be bothered with Hide the actual DbContext (make it internal) to prevent misuse Keep security checks and saving and rollback in a single location Force the use of the Specification pattern on queries  @alert info Note that repositories and UoW should not be used to abstract away the ORM tool because that is just another abstraction layer which is not required. Use it for the advantages mentioned above @end\nA Unit of Work (UoW) is a a combination of several actions that will be grouped into a transaction. This means that either all actions inside a UoW are committed or rolled back. The advantage of using a UoW is that multiple save actions to multiple Repositories can be grouped as a unit.\nA repository is a class or service responsible for providing objects and allowing end-developers to query data. Instead of querying the DbContext directly, the DbContext can be abstracted away to provide default queries and force required functionality to all end-developers of the DbContext.\nOverview of Unit of Work and repositories There are different interpretations of how repositories should be used in combination with unit of work. Let\u0026rsquo;s start with an overview how the DbContext, Repositories and Unit of Work relate to each other. The image below represents an overview of the situation as Catel deals with the DbContext, Repositories and Unit of Work:\n[image here]\nThe image above shows that the Unit of Work is the top-level component to be used. Each UoW contains its own DbContext instance. The DbContext can either be injected or will be created on the fly. Then the UoW also contains repositories which always get the DbContext injected. This way, all repositories inside a UoW share the same DbContext.\nCreating a Unit of Work A UoW can be created by simply instantiating it. The end-developer has the option to either inject the DbContext or let the DbContextManager take care of it automatically.\nusing (var uow = new UnitOfWork\u0026lt;MyDbContext\u0026gt;()) { // get repositories and query away }  Creating a repository A repository can be created very easily by deriving from the EntityRepositoryBase class. Below is an example of a customer repository:\npublic class CustomerRepository : EntityRepositoryBase\u0026lt;Customer, int\u0026gt;, ICustomerRepository { public CustomerRepository(DbContext dbContext) : base(dbContext) { } } public interface ICustomerRepository : IEntityRepository\u0026lt;Customer, int\u0026gt; { }  Retrieving repositories from a Unit of Work Once a UoW is created, it can be used to resolve repositories. To retrieve a repository from the UoW, the following conditions must be met:\n The repository must be registered in the ServiceLocator as Transient type. If the repository is declared as non-transient, it will be instantiated as new instance anyway. The repository must have a constructor accepting a DbContext instance  To retrieve a new repository from the UoW, use the following code:\nusing (var uow = new UnitOfWork\u0026lt;MyDbContext\u0026gt;()) { var customerRepository = uow.GetRepository\u0026lt;ICustomerRepository\u0026gt;(); // all interaction with the customer repository is applied to the unit of work }  Saving a Unit of Work It is very important to save a Unit of Work. Once the Unit of Work gets out of scope (outside the using), all changes will be discarded if not explicitly saved.\nusing (var uow = new UnitOfWork\u0026lt;MyDbContext\u0026gt;()) { var customerRepository = uow.GetRepository\u0026lt;ICustomerRepository\u0026gt;(); // all interaction with the customer repository is applied to the unit of work uow.SaveChanges(); }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/declaring-modules/",
	"title": "Declaring modules",
	"tags": [],
	"description": "",
	"content": " When developing a module in Prism, most of the time you need a base class for all the models that contain the IoC container, IRegionManager and more. To make development with prism and Catel as easy as possible, the ModuleBase is included with Orc.Prism. There are two versions of the ModuleBase available, which are described below.\nGeneric ModuleBase The generic module base allows the end-developer to decide what IoC container is used. For example, the developer has the choice whether the ServiceLocator or any other IoC container such as Unity or MEF is used.\nDefining a module Defining a module is very simple. Just create a new class with the ModuleBase as base class.\npublic class MyModule : ModuleBase\u0026lt;IServiceLocator\u0026gt; { public MyModule() : base(\u0026quot;My module\u0026quot;, ServiceLocator.Instance.ResolveType\u0026lt;IModuleTracker\u0026gt;(), ServiceLocator.Instance) { } protected override T GetService\u0026lt;T\u0026gt;() { return Container.ResolveType\u0026lt;T\u0026gt;(); } }  Handling code when the module is initialized The ModuleBase contains convenience methods when the module is initialized. Simple override the OnInitializing or OnInitialized methods.\nNon-generic ModuleBase The non-generic base uses the ServiceLocator as default IoC container. This class derives from the generic module base and specifies the ServiceLocator as IoC container.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/module-catalogs/",
	"title": "Module Catalogs",
	"tags": [],
	"description": "",
	"content": "There are several module catalogs available in Orc.Prism.\n\rCompositeModuleCatalog\r\r\rDownloadingModuleCatalog\r\r\rNuGetBasedModuleCatalog\r\r\rSafeDirectoryModuleCatalog\r\r\r"
},
{
	"uri": "http://opensource.wildgums.com/orc.entityframework/using-stored-procedures-and-functions/",
	"title": "Using stored procedures and functions",
	"tags": [],
	"description": "",
	"content": "Sometimes it\u0026rsquo;s required to use stored procedures or functions. This is still possible with Catel. Below is an example on how to call a stored procedure:\nusing (var dbContextManager = DbContextManager\u0026lt;MyEntities\u0026gt;.GetManager()) { var dbContext = dbContextManager.DbContext; var result = dbContext.Database.SqlQuery\u0026lt;ReturnType\u0026gt;(\u0026quot;storedProcedureName\u0026quot;, params); }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/translating-or-customizing/",
	"title": "Translating or customizing",
	"tags": [],
	"description": "",
	"content": " Starting with version 1.0, it is possible to fully customize the bootstrapper tasks. Orc.Prism now uses the IBootstrapperTaskFactory to create the tasks instead of the bootstrapper itself. To customize the logic, one has to implement his/her own version of the IBootstrapperTaskFactory. The easiest way to do this is to derive from the existing BootstrapperTaskFactory and register it in the service locator before the bootstrapper is created.\nCustomizing the messages The example below customizes the messages that are shown during the initialization tasks.\npublic class TranslatedBootstrapperTaskFactory : BootstrapperTaskFactory { public override ITask CreateCreateLoggerTask(Action action) { return CreateCreateLoggerTask(action, \u0026quot;We are now creating the logger for you\u0026quot;); } }  @alert important Remember to register the TranslatedBootstrapperTaskFactory before the bootstrapper is created @end\n@alert important Note that this example only customizes a single action. To customize all the actions, override all methods @end\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.entityframework/using-the-modelbase-as-base-class-for-code-first-entities/",
	"title": "Using the ModelBase as base class for code-first entities",
	"tags": [],
	"description": "",
	"content": "The ModelBase provides lots of functionality such as change tracking, property notifications and validation. It is possible to use this in code first. To do so, derive the entities from the ModelBase class as shown in the example below:\n[Table(\u0026quot;person\u0026quot;)] public partial class Person : ModelBase { [StringLength(50)] public string FirstName { get; set; } [StringLength(50)] public string lastname { get; set; } public long PersonId { get; set; } public long FamilyId { get; set; } public virtual Family Family { get; set; } }  In the context, add additional initialization code to ignore the Catel properties on the ModelBase class:\nprotected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity\u0026lt;Family\u0026gt;() .IgnoreCatelProperties() .Property(e =\u0026gt; e.FamilyName) .IsUnicode(false); modelBuilder.Entity\u0026lt;Family\u0026gt;() .HasMany(e =\u0026gt; e.Person) .WithRequired(e =\u0026gt; e.Family) .WillCascadeOnDelete(false); }  Now the entities are ready to be used and can contain validation. "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/animatedgif/",
	"title": "AnimatedGif",
	"tags": [],
	"description": "",
	"content": " This is simple control infinitely animate GIF images on its surface without blocking main UI thread.\nInherits from System.Windows.Controls.Image.\nThis control is very useful for wait dialogs.\nProperties    Property name Description     GifSource Gets or sets gif image path    How to use Place the AnimatedGif control on the parent content control, then specify GifSource.\n\u0026lt;orc:AnimatedGif x:Name=\u0026quot;LoadingGif\u0026quot; Width=\u0026quot;16\u0026quot; Height=\u0026quot;16\u0026quot; HorizontalAlignment=\u0026quot;Center\u0026quot; GifSource=\u0026quot;/Resources/Images/Loading.gif\u0026quot; Margin=\u0026quot;5\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/bindablerichtextbox/",
	"title": "BindableRichTextBox",
	"tags": [],
	"description": "",
	"content": " The control can be used as a regular RichTextBox with one added advantage. It can be bound to a FlowDocument.\nInherits from System.Windows.Controls.RichTextBox.\nIt is very useful to use with the MVVM pattern.\nProperties    Property name Description     BindableDocument Gets or sets bindable FlowDocument    How to use For binding data to the BindableRichTextBox, use the BindableDocument property (the type is FlowDocument)\n\u0026lt;orc:BindableRichTextBox BindableDocument=\u0026quot;{Binding FlowDoc}\u0026quot; /\u0026gt;  Once that is done you may assign a new value to it or change the layout of the FlowDocument.\nEverything will automatically be displayed in your UI.\n"
},
{
	"uri": "http://opensource.wildgums.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/colorlegend/",
	"title": "ColorLegend",
	"tags": [],
	"description": "",
	"content": " This control manages color collection. It can hide/show, select and change colors.\nInherits from System.Windows.Controls.HeaderedContentControl.\nProperties    Property name Description     AccentColorBrush Get or sets accent color   AllowColorEditing Gets or sets a whether color can be edited.   EditingColor Gets or sets whether user editing current color.   Filter Gets or sets filter for list of color.   FilteredItemsIds Gets or sets the filtered items ids.   FilteredItemsSource Gets or sets a source for color items respecting current filter value.   FilterWatermark Gets or sets filter watermark string we use in search textbox.   ItemsSource Gets or sets source for color items.   IsAllVisible Gets or sets whether is all visible.   IsColorSelecting Gets or sets whether user editing current color.   SelectedColorItems Gets or sets list of selected items.   ShowBottomToolBox Gets or sets whether bottom tool box is visible.   ShowColorVisibilityControls Gets or sets whether visibility controls are visible.   ShowSearchBox Gets or sets whether search box is visible.   ShowSettingsBox Gets or sets whether settings button is visible.   ShowToolBox Gets or sets whether tool box is visible.   OperationColorAttribute Will be removed in v2.0! Gets or sets the operation color attribute.   ShowSettings Will be removed in v2.0! Gets or sets whether settings button is visible.   UseRegexFiltering Will be removed in v2.0! Gets or sets whether regex is used when search is performed.    Events    Event name Description     SelectionChanged Occurs when selected color item changed    How to use When using the ColorLegend in data binding scenarios, bind your color items collection to ItemsSource property. You can show/hide ToolBox, BottomToolBox, ColorVisibilityControls, SearchBox, SettingsBox by setting the appropriate flags. Bind to SelectedColorItems property to get current selection. Because the ColorLegend is inherits from the HeaderedContentControl you can specify its header as shown in the example.\n\u0026lt;orc:ColorLegend ItemsSource=\u0026quot;{Binding ColorItems}\u0026quot; AllowColorEditing=\u0026quot;True\u0026quot; ShowColorVisibilityControls=\u0026quot;True\u0026quot; ShowSettingsBox=\u0026quot;False\u0026quot; SelectedColorItems=\u0026quot;{Binding SelectedColorItems}\u0026quot;\u0026gt; \u0026lt;orc:ColorLegend.Header\u0026gt; \u0026lt;orc:HeaderBar Header=\u0026quot;This is ColorLegend header\u0026quot;/\u0026gt; \u0026lt;/orc:ColorLegend.Header\u0026gt; \u0026lt;/orc:ColorLegend\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/colorpicker/",
	"title": "ColorPicker",
	"tags": [],
	"description": "",
	"content": " This control allows user to choose a color.\nInherits from System.Windows.Controls.Control.\nProperties    Property name Description     Color Gets or sets picked color.   CurrentColor Get or sets current color.   IsDropDownOpen Gets or sets whether is popup visible.   PopupPlacement Gets or sets the select color popup placement.    Events    Event name Description     ColorChanged Occurs when picked color changed    How to use When using the ColorPicker in data binding scenarios, bind color you want to pick to Color property. To get (initialize) current color bind to CurrentColor property.\n\u0026lt;orc:ColorPicker Width=\u0026quot;50\u0026quot; Color=\u0026quot;{Binding PickedColor}\u0026quot; CurrentColor=\u0026quot;{Binding CurrentColor}\u0026quot; PopupPlacement=\u0026quot;Bottom\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/module-catalogs/compositemodulecatalog/",
	"title": "CompositeModuleCatalog",
	"tags": [],
	"description": "",
	"content": " Initializing the catalog Below is an example of the catalog in action:\nprotected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); ModuleCatalog.Add(new DirectoryModuleCatalog { ModulePath = @\u0026quot;.\\Modules\u0026quot; }); ModuleCatalog.Add(new NuGetBasedModuleCatalog { PackageSource = @\u0026quot;C:\\SomeDir\\localNugetSource\u0026quot;, AllowPrereleaseVersions = true, IgnoreDependencies = false }); ModuleCatalog.Initialize(); }  Customizing the catalog No customization options documented yet - feel free to contribute\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/connectionstringbuilder/",
	"title": "ConnectionStringBuilder",
	"tags": [],
	"description": "",
	"content": " This control allows user to build connection string for remote and local data sources.\nInherits from Catel.Windows.Controls.UserControl.\nIt works as shown below. Properties    Property name Description     AccentColorBrush Gets or sets accent color.   ConnectionState Gets or sets the state of connection (not tested, invalid or valid).   ConnectionString Gets or sets connection string.   IsInEditMode Gets or set whether connection string properties dialog is visible.    How to use Put control on a parent content control and bind to ConnectionString property.\n\u0026lt;orc:ConnectionStringBuilder x:Name=\u0026quot;ConnectionStringBuilderControl\u0026quot; ConnectionString=\u0026quot;{Binding ConnectionString}\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/culturepicker/",
	"title": "CulturePicker",
	"tags": [],
	"description": "",
	"content": " This control allows to pick culture from System.Globalization.CultureTypes.AllCultures list.\nInherits from Catel.Windows.Controls.UserControl.\nIt looks like ordinary combobox populated with list of CultureInfo.\nProperties    Property name Description     SelectedCulture Gets or sets selected culture (of type System.Globalization.CultureInfo)    How to use Put it on parent control and bind SelectedCulture property.\n\u0026lt;orc:CulturePicker SelectedCulture=\u0026quot;{Binding Culture}\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/datepicker/",
	"title": "DatePicker",
	"tags": [],
	"description": "",
	"content": " This control looks like a regular DatePicker but allows you to edit a date quickly.\nInherits from Catel.Windows.Controls.UserControl.\nDouble click on any number to start editing. Press the “Tab” key to move to the next number.\nClick on a letter to display a drop down list to choose from.\nProperties    Property name Description     AccentColorBrush Gets or sets accent color   AllowNull Gets or sets whether Value can be null.   AllowCopyPaste Gets or sets whether Value can be copy/paste.   Format Gets or sets DateTime Value format.   IsReadOnly Gets or sets whether Value is only for read.   IsYearShortFormat Gets whether year in short format.   ShowOptionsButton Gets or sets whether options button is visible.   Value Gets or sets current DateTime value    How to use Bind a DateTime value to the Value property:\n \u0026lt;orc:DatePicker Value=\u0026quot;{Binding DateValue}\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/daterangepicker/",
	"title": "DateRangePicker",
	"tags": [],
	"description": "",
	"content": " This control is used to display and edit date range quickly.\nInherits from Catel.Windows.Controls.UserControl.\nDateRangePicker consist of two DateTimePickers to specify start end date of date range and one TimeSpanPicker to display/change range itself.\nProperties    Property name Description     AllowCopyPaste Gets or sets whether copy/paste is allowed.   EndDate Gets or sets end date.   Format Gets or sets DateTime format for start and end dates of range.   HideSeconds Gets or sets whether seconds section of start and end DateTimePickers is visible.   HideTime Gets or sets whether time section of start and end DateTimePickers is visible.   IsReadOnly Gets or sets whether Span readonly.   Ranges Gets or sets collection of DateRanges presented on Ranges combobox.   SelectedRange Gets or sets DateRange selected on Ranges combobox.   ShowOptionsButton Gets or sets whether options button of start and end DateTimePickers is visible.   Span Get or sets result date range (of type System.TimeSpan)   StartDate Gets or sets start date.    How to use Bind a TimeSpan value to the Span property, also specify Ranges, Format. To get/set End and Start date bind to StartDate and EndDate properties.\n\u0026lt;orc:DateRangePicker Span=\u0026quot;{Binding Span}\u0026quot; StartDate=\u0026quot;{Binding StartDate}\u0026quot; EndDate=\u0026quot;{Binding EndDate}\u0026quot; Ranges=\u0026quot;{Binding Ranges}\u0026quot; Format=\u0026quot;yyyy-MM-dd HH:mm:ss\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/datetimepicker/",
	"title": "DateTimePicker",
	"tags": [],
	"description": "",
	"content": " This control is used to display and edit DateTime data quickly.\nInherits from Catel.Windows.Controls.UserControl.\nDouble click on any number to start editing. Press the \u0026ldquo;Tab\u0026rdquo; key to move to the next number.\nClick on a letter to display a drop down list to choose from.\nProperties    Property name Description     AccentColorBrush Gets or sets accent color   AllowNull Gets or sets whether Value can be null.   AllowCopyPaste Gets or sets whether Value can be copy/paste.   Format Gets or sets DateTime Value format.   HideSeconds Gets or sets whether seconds section DateTimePickers is visible.   HideTime Gets or sets whether time section DateTimePickers is visible.   IsAmPmShortFormat Gets whether Am Pm section is in short format (t).   IsHour12Format Get whether time section is in 12 hours format.   IsReadOnly Gets or sets whether Value is only for read.   IsYearShortFormat Gets whether year section in short format.   ShowOptionsButton Gets or sets whether options button is visible.   Value Gets or sets current DateTime value    How to use Bind a DateTime value to the Value property:\n \u0026lt;orc:DateTimePicker Value=\u0026quot;{Binding DateTimeValue}\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/dbproviderpicker/",
	"title": "DbProviderPicker",
	"tags": [],
	"description": "",
	"content": " This control allows user to pick database provider from list of providers formed by function: DbProviderFactories.GetFactoryClasses().\nInherits from Catel.Windows.Controls.UserControl.\nProperties    Property name Description     DbProvider Gets or sets picked database provider.    How to use Bind a DbProvider value to the DbProvider property:\n\u0026lt;controls:DbProviderPicker DbProvider=\u0026quot;{Binding DbProvider, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/directorypicker/",
	"title": "DirectoryPicker",
	"tags": [],
	"description": "",
	"content": " This control allows users to choose a directory.\nInherits from Catel.Windows.Controls.UserControl.\nProperties    Property name Description     LabelWidth Gets or sets label width   LabelText Gets or sets label content   SelectedDirectory Gets or sets selected directory    How to use Specify label text and width and bind a directory path to the SelectedDirectory property.\n\u0026lt;orc:DirectoryPicker LabelText=\u0026quot;DirectoryPicker control\u0026quot; LabelWidth=\u0026quot;150\u0026quot; SelectedDirectory=\u0026quot;{Binding SelectedDirectory}\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/module-catalogs/downloadingmodulecatalog/",
	"title": "DownloadingModuleCatalog",
	"tags": [],
	"description": "",
	"content": " The DownloadingModuleCatalog allow the downloading of all modules dynamically based on the module info.\nInitializing the catalog protected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); }  Customizing the catalog No customization options documented yet - feel free to contribute\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/dropdownbutton/",
	"title": "DropDownButton",
	"tags": [],
	"description": "",
	"content": " The control is made up of two buttons side by side. The First button works as a regular button and the second one will display a customizable drop down menu under the control.\nInherits from Catel.Windows.Controls.UserControl.\nProperties    Property name Description     AccentColorBrush Gets or sets accent color.   ArrowLocation Gets or sets arrow location (Left, Top, Right or Bottom).   ArrowMargin Gets or sets arrow margin.   Command Gets or sets the command to execute when the button itself is clicked.   DropDown Gets or sets the drop down content (e.g. context menu).   EnableTransparentBackground Gets or sets whether transparency enabled.   Header Gets or sets button caption.   ShowDefaultButton Gets or sets whether arrow button has default view.    How to use Specify Header and DropDown. If you need to handle button click itself bind to Command property.\n\u0026lt;orc:DropDownButton Header=\u0026quot;Action\u0026quot; Command=\u0026quot;{Binding DefaultAction}\u0026quot;\u0026gt; \u0026lt;orc:DropDownButton.DropDown\u0026gt; \u0026lt;ContextMenu\u0026gt; \u0026lt;MenuItem Header=\u0026quot;Item 1\u0026quot;/\u0026gt; \u0026lt;MenuItem Header=\u0026quot;Item 2\u0026quot;/\u0026gt; \u0026lt;Separator/\u0026gt; \u0026lt;MenuItem Header=\u0026quot;Item 2\u0026quot;/\u0026gt; \u0026lt;/ContextMenu\u0026gt; \u0026lt;/orc:DropDownButton.DropDown\u0026gt; \u0026lt;/orc:DropDownButton\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/expander/",
	"title": "Expander",
	"tags": [],
	"description": "",
	"content": " This is simple expander with ability to auto resize grid and accent color.\nInherits from System.Windows.Controls.HeaderedContentControl.\nProperties    Property name Description     AccentColorBrush Gets or sets accent color   AutoResizeGrid Gets or sets whether Grid column/row on which Expander is located will be auto resized to fit expander content.   IsExpanded Gets or sets whether the Expander content window is visible.   ExpandDirection Gets or sets expand direction (Down, Up, Left or Right).    How to use User must manualy create ControlTemplate for expander or use predefined ExpandLeftStyle from Orc.Controls library. The example below shows how to use Expander control with AutoResizeGrid enabled.\n\u0026lt;Grid x:Name=\u0026quot;Grid\u0026quot;\u0026gt; \u0026lt;Grid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;300\u0026quot; /\u0026gt; \u0026lt;/Grid.ColumnDefinitions\u0026gt; \u0026lt;Rectangle x:Name=\u0026quot;Rect\u0026quot; Fill=\u0026quot;Blue\u0026quot; Height=\u0026quot;50\u0026quot; VerticalAlignment=\u0026quot;Center\u0026quot; HorizontalAlignment=\u0026quot;Stretch\u0026quot;/\u0026gt; \u0026lt;TextBlock Text=\u0026quot;{Binding ElementName=Rect, Path=ActualWidth}\u0026quot; Foreground=\u0026quot;White\u0026quot; FontWeight=\u0026quot;Bold\u0026quot;/\u0026gt; \u0026lt;GridSplitter Grid.Column=\u0026quot;1\u0026quot; MinWidth=\u0026quot;2\u0026quot; HorizontalAlignment=\u0026quot;Center\u0026quot; VerticalAlignment=\u0026quot;Stretch\u0026quot; Background=\u0026quot;#D3D3D3\u0026quot;/\u0026gt; \u0026lt;orc:Expander Name=\u0026quot;MyExpander\u0026quot; Header=\u0026quot;Header\u0026quot; Grid.Column=\u0026quot;2\u0026quot; ExpandDirection=\u0026quot;Left\u0026quot; AutoResizeGrid=\u0026quot;True\u0026quot; IsExpanded=\u0026quot;True\u0026quot; Style=\u0026quot;{DynamicResource ExpandLeftStyle}\u0026quot;\u0026gt; \u0026lt;!--Expander content--\u0026gt; \u0026lt;TextBlock Text=\u0026quot;Expander content\u0026quot;/\u0026gt; \u0026lt;/orc:Expander\u0026gt; \u0026lt;/Grid\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/filterbox/",
	"title": "FilterBox",
	"tags": [],
	"description": "",
	"content": " This control looks like a regular TextBox with autocomplection and suggested value list.\nInherits from System.Windows.Controls.ContentControl.\nStart typing and you will see a drop down list with possible matches. The drop down list will automatically update itself as you are typing.\nClick on the \u0026lsquo;x\u0026rsquo; button to reset the text box.\nProperties    Property name Description     AccentColorBrush Gets or sets accent color.   AllowAutoCompletion Gets or sets whether autocompletion is allowed.   FilterSource Gets or sets the collection of items shown in the drop down list   PropertyName Get or sets the name of the property you want to use to filter the items in the collection with.   Text Gets or sets text entered by the user, which is used to filter the items in the FilterSource collection   Watermark Gets or sets watermark.    How to use \u0026lt;orc:FilterBox PropertyName=\u0026quot;Value\u0026quot; FilterSource=\u0026quot;{Binding FilterSource}\u0026quot; Text=\u0026quot;{Binding FilterText}\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/frameratecounter/",
	"title": "FramerateCounter",
	"tags": [],
	"description": "",
	"content": " A counter to show the frame rate inside an application.\nInherits from System.Windows.Controls.TextBlock.\nProperties    Property name Description     Prefix Gets or sets prefix for application frame rate.    How to use \u0026lt;orc:FrameRateCounter Prefix=\u0026quot;Frame rate: \u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/headerbar/",
	"title": "HeaderBar",
	"tags": [],
	"description": "",
	"content": " This control can be used like a header for System.Windows.Controls.HeaderedContentControl.\nInherits from System.Windows.Controls.Control.\nProperties    Property name Description     Header Gets or sets header text.    How to use \u0026lt;orc:HeaderBar Header=\u0026quot;My header bar\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/linklabel/",
	"title": "LinkLabel",
	"tags": [],
	"description": "",
	"content": " This control is a label which looks and behaves like a hyperlink.\nInherits from System.Windows.Controls.Label.\nProperties    Property name Description     ClickBehavior Gets or sets click behavior. Can be OpenUrlInBrowser or Undefined.   Command Gets or sets command.   CommandParameter Gets or sets command parameter.   CommandTarget Gets or sets command target.   HasUrl Get whether url has a value.   HoverForeground Gets or sets hover foreground.   HyperlinkStyle Gets or sets the hyperlink style.   LinkLabelBehavior Gets or sets link label behavior. Can be SystemDefault, AlwaysUnderline, HoverUnderline, NeverUnderline.   Url Get or sets the URL.    Events    Event name Description     Click Occurs on click.   RequestNavigate Occurs on request navigate.    How to use \u0026lt;orc:LinkLabel Content=\u0026quot;Action\u0026quot; ToolTip=\u0026quot;Action\u0026quot; Command=\u0026quot;{Binding DefaultAction}\u0026quot; HoverForeground=\u0026quot;Orange\u0026quot; Url=\u0026quot;http://catelproject.com\u0026quot; ClickBehavior=\u0026quot;OpenUrlInBrowser\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/listtextbox/",
	"title": "ListTextBox",
	"tags": [],
	"description": "",
	"content": " This textbox will automaticaly complete user input from specified list.\nInherits from System.Windows.Controls.TextBox.\nProperties    Property name Description     ListOfValues Gets or sets list of suggested values.   Value Gets or sets current text value.    Events    Event name Description     RightBoundReached Occurs when caret reached end of text.   LeftBoundReached Occurs when caret reached text start.    How to use Bind to text value to Value property and specify ListOfValues.\n\u0026lt;orc:ListTextBox x:Name=\u0026quot;MinorGuitarChordsList\u0026quot; Value=\u0026quot;{Binding SelectedChord}\u0026quot;\u0026gt; \u0026lt;orc:ListTextBox.ListOfValues\u0026gt; \u0026lt;x:Array Type=\u0026quot;sys:String\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:sys=\u0026quot;clr-namespace:System;assembly=mscorlib\u0026quot;\u0026gt; \u0026lt;sys:String\u0026gt;Am\u0026lt;/sys:String\u0026gt; \u0026lt;sys:String\u0026gt;Bm\u0026lt;/sys:String\u0026gt; \u0026lt;sys:String\u0026gt;Cm\u0026lt;/sys:String\u0026gt; \u0026lt;sys:String\u0026gt;Dm\u0026lt;/sys:String\u0026gt; \u0026lt;sys:String\u0026gt;Em\u0026lt;/sys:String\u0026gt; \u0026lt;sys:String\u0026gt;Fm\u0026lt;/sys:String\u0026gt; \u0026lt;sys:String\u0026gt;Gm\u0026lt;/sys:String\u0026gt; \u0026lt;/x:Array\u0026gt; \u0026lt;/orc:ListTextBox.ListOfValues\u0026gt; \u0026lt;/orc:ListTextBox\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/logviewer/",
	"title": "LogViewer",
	"tags": [],
	"description": "",
	"content": " This control is used to display log messages generated from an application in real time. The Control uses it\u0026rsquo;s own LogListener, which is derived from Catel.Logging.LogListenerBase.\nInherits from Catel.Windows.Controls.UserControl.\nA RichTextBox is used to display the log messages.\nProperties Filtering\n   Property name Description     IgnoreCatelLogging Gets or sets whether catel logging is turned on. Disabling catel logging improve performance.   LogFilter Gets or sets search term for filtering log records.   LogListenerType Gets or sets log listener type.   ShowDebug Gets or sets whether debug log records are visible.   ShowInfo Gets or sets whether info log records are visible.   ShowWarning Gets or sets whether warning log records are visible.   ShowError Gets or sets whether error log records are visible.   SupportCommandManager Gets or sets whether control supports command manager. This is required to support application-wide commands on the log viewer control, somehow the RichTextBox does not fire KeyDown events for combinations of keys (CTRL + [Key]).   TypeFilter Gets or sets typename for filtering long records.    Visualisation\n   Property name Description     EnableIcons Gets or sets whether the icon associated with each log record is visible. The icon will change depending on the log level.   EnableTimestamp Gets or sets whether timestamp for each log record is visible.   EnableTextColoring Gets or sets whether colors for each log record depending on its log level is visible.   EnableThreadId Gets or sets whether thread id for each log record is visible.    Events    Event name Description     LogEntryDoubleClick Occurs when user double click on a log record.    Methods    Method name Description     Clear Clear all log entries.   CopyToClipboard Copy log entries to clipboard.    How to use \u0026lt;orc:LogViewer LogEntryDoubleClick=\u0026quot;LogViewerControlOnLogRecordDoubleClick LogFilter=\u0026quot;{Binding Text, ElementName=FilterTextBox}\u0026quot; ShowDebug=\u0026quot;{Binding IsChecked, ElementName=ShowDebugToggleButton}\u0026quot; ShowInfo=\u0026quot;{Binding IsChecked, ElementName=ShowInfoToggleButton}\u0026quot; ShowWarning=\u0026quot;{Binding IsChecked, ElementName=ShowWarningToggleButton}\u0026quot; ShowError=\u0026quot;{Binding IsChecked, ElementName=ShowErrorToggleButton}\u0026quot; EnableTimestamp=\u0026quot;{Binding IsChecked, ElementName=EnableTimestampCheckBox}\u0026quot; EnableTextColoring=\u0026quot;True\u0026quot; EnableIcons=\u0026quot;True\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/module-catalogs/nugetbasedmodulecatalog/",
	"title": "NuGetBasedModuleCatalog",
	"tags": [],
	"description": "",
	"content": " The NuGetBasedModuleCatalog allows a user to use a NuGet package source as a module source. @alert info Note that the CompositeNuGetBasedModuleCatalog works the same but can combine multiple NuGet sources @end\nInitializing the catalog The catalog has several options. Below is an example of a default customization:\nprotected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); ModuleCatalog.IgnoreDependencies = false; ModuleCatalog.AllowPrereleaseVersions = true; ModuleCatalog.PackageSource = @\u0026quot;https://www.nuget.org/api/v2/\u0026quot;, }  Initializing the composite catalog The composite catalog can be initialized using the code below:\nprotected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); ModuleCatalog.Add(new NuGetBasedModuleCatalog { PackageSource = @\u0026quot;C:\\SomeDirectory\\localNugetSource\u0026quot;, AllowPrereleaseVersions = true, IgnoreDependencies = false, DefaultInitializationMode = InitializationMode.WhenAvailable }); ModuleCatalog.Add(new NuGetBasedModuleCatalog { PackageSource = @\u0026quot;https://www.nuget.org/api/v2/\u0026quot;, AllowPrereleaseVersions = true, IgnoreDependencies = false, }); }  Customizing the catalog There are several customization options.\nChanging the default initialization mode By default, the modules are loaded on demand to prevent a user downloading all the modules at once. To change this behavior, use the DefaultInitializationMode property.\nModuleCatalog.DefaultInitializationMode = InitializationMode.WhenAvailable;  Creating a module To prevent the catalog to consider all packages on a source as a module, there is a naming convention required for the modules. In the nuspec file, make sure to use the following description element:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;package xmlns=\u0026quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\u0026quot;\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;TestModule\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;[someauthor]\u0026lt;/authors\u0026gt; \u0026lt;requireLicenseAcceptance\u0026gt;false\u0026lt;/requireLicenseAcceptance\u0026gt; \u0026lt;description\u0026gt;ModuleName=\u0026lt;moduleName\u0026gt;;ModuleType=\u0026lt;moduleType\u0026gt;;DependsOn={ \u0026lt;moduleName\u0026gt;, \u0026lt;moduleName\u0026gt; }\u0026lt;/description\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency id=\u0026quot;\u0026lt;dependencyId\u0026gt;\u0026quot; version=\u0026quot;\u0026lt;dependencyVersion\u0026gt;\u0026quot; /\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt;  For example:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;package xmlns=\u0026quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\u0026quot;\u0026gt; \u0026lt;metadata\u0026gt; \u0026lt;id\u0026gt;TestModule\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;authors\u0026gt;[someauthor]\u0026lt;/authors\u0026gt; \u0026lt;requireLicenseAcceptance\u0026gt;false\u0026lt;/requireLicenseAcceptance\u0026gt; \u0026lt;description\u0026gt;ModuleName=Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC.NuGetBasedModuleC; ModuleType=Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC.NuGetBasedModuleC, Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC; DependsOn={ Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleB.NuGetBasedModuleB }\u0026lt;/description\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency id=\u0026quot;Newtonsoft.Json\u0026quot; version=\u0026quot;6.0.8\u0026quot; /\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/metadata\u0026gt; \u0026lt;/package\u0026gt;  @alert info It is possible to manually add a module, then the naming convention is not required @end\nModule vs. library dependencies There a two kind of dependencies that you can declare in a module nuspec file. Module dependencies in order to identify Prism like module dependencies using the key *DependsOn* at description tag.\n\u0026lt;description\u0026gt;ModuleName=Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC.NuGetBasedModuleC; ModuleType=Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC.NuGetBasedModuleC, Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC; DependsOn={ Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleB.NuGetBasedModuleB }\u0026lt;description\u0026gt;  Or you can specify libraries dependencies using the dependencies section just as regular nuspec file. \u0026lt;dependencies\u0026gt; \u0026lt;dependency id=\u0026quot;Newtonsoft.Json\u0026quot; version=\u0026quot;6.0.8\u0026quot; /\u0026gt; \u0026lt;/dependencies\u0026gt; ``` ### Expected package structure The package structure is like a regular nupkg file. It is recommended to locate the assemblies into the lib directory, specifically into the target framework directory. Prism can run under v4.0 or v4.5 net framework version. So, an example of package structure is the follow: * lib/NET40/Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC.dll * lib/NET45/Catel.Examples.WPF.Prism.Modules.NuGetBasedModuleC.dll But if the assembly doesn't found in the expected location - due by the running current platform - Catel will try to find the assembly into the package lib directory recursively. #### Implementing a customized module catalog The NuGetBasedModuleCatalog is heavily customizable. For example, by default it uses the naming convention and uses OnDemand only for the load behavior. Below is an example of an implementation that directly loads all available modules:  public class LoadImmediatelyNuGetBasedModuleCatalog : NuGetBasedModuleCatalog { // Override GetFilteredPackagedModules, GetPackageInitializationMode or CreatePackageModule to create a fully customized catalog }\n ### Solving the loadFromRemoteSources exception For some applications, the following exception might be thrown:  An attempt was made to load an assembly from a network location which would have caused the assembly to be sandboxed in previous versions of the .NET Framework. This release of the .NET Framework does not enable CAS policy by default, so this load may be dangerous.\nIf this load is not intended to sandbox the assembly, please enable the loadFromRemoteSources switch. See http://go.microsoft.com/fwlink/?LinkId=155569 for more information.\n To solve this, add this to the app.config file:  \n ```\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/numerictextbox/",
	"title": "NumericTextBox",
	"tags": [],
	"description": "",
	"content": " This text box for numeric, percentage or currency input.\nInherits from System.Windows.Controls.TextBox.\nProperties    Property name Description     Format Gets or sets input value format (standart formats/custom formats) (e.g. \u0026ldquo;F0\u0026rdquo;, \u0026ldquo;C2\u0026rdquo; etc).   MaxValue Gets or sets maximum input value.   MinValue Gets or sets minimum input value.   Value Gets or sets current double value.    Events    Event name Description     RightBoundReached Occurs when caret reached end of text.   LeftBoundReached Occurs when caret reached text start.    How to use \u0026lt;orc:NumericTextBox x:Name=\u0026quot;Price\u0026quot; Value=\u0026quot;{Binding Price}\u0026quot; MinValue=\u0026quot;1\u0026quot; MaxValue=\u0026quot;12000\u0026quot; Format=C2/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/openfilepicker/",
	"title": "OpenFilePicker",
	"tags": [],
	"description": "",
	"content": " This control allows user to choose an existing file directory.\nInherits from Catel.Windows.Controls.UserControl.\nProperties    Property name Description     BaseDirectory Gets or sets directory path that will be displayed when open file dialog open.   Filter Gets or sets filter string that determines what types of files are displayed from the open file dialog.   LabelWidth Gets or sets label width.   LabelText Gets or sets label content.   SelectedFile Gets or sets selected file path.    How to use Specify label text and width and bind a file path to the SelectedFile property. Also you can specify file filter.\n\u0026lt;orc:OpenFilePicker LabelText=\u0026quot;OpenFilePicker control\u0026quot; LabelWidth=\u0026quot;150\u0026quot; SelectedFile=\u0026quot;{Binding SelectedFile}\u0026quot; BaseDirectory=\u0026quot;C:\\\u0026quot; Filter=\u0026quot;Image files (*.bmp, *.jpg)|*.bmp;*.jpg|All files (*.*)|*.*\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.analytics/",
	"title": "Orc.Analytics",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Analytics\nThis library makes it very easy to integration Google Analytics with Catel projects.\nInitializing the service Initializing the service is really easy. It tries to get as much information as possible, but all properties can be changed accordingly. The service is automatically registered in the Catel service locator.\nUse the code to initialize the service by letting the service injected into a view model or resolve it manually from the service locator, then call this code:\ngoogleAnalyticsService.AccountId = AccountId;  Customizing user ID The user id is retrieved from the IUserIdService. By default, it uses a combination of the CPU id and the HDD id and hashes a combination of these 2 so they cannot be traced back to the user.\nIt can be customized by creating a custom IUserIdService or by setting the UserId property manually on the IGoogleAnalyticsService.\nSending data You can send data to Google Analytics with several calls. Below are all the calls explained separately.\nSendView Use the following method:\npublic async Task SendView(string viewName);  SendEvent Use the following method:\npublic async Task SendEvent(string category, string action, string label = null, long value = 0);  SendTransaction Use the following method:\npublic async Task SendTransaction(string sku, string name, string transactionId, long costPerProduct, int quantity = 1);  SendTiming Use the following method:\npublic async Task SendTiming(TimeSpan time, string category, string variable, string label = \u0026quot;\u0026quot;)  "
},
{
	"uri": "http://opensource.wildgums.com/orc.automaticsupport/",
	"title": "Orc.AutomaticSupport",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.AutomaticSupport\nAllows the user to easily download a remote file that will validate and provide automatic support to the end-user.\nInitializing the service It is very important to initialize the service. It can be done by retrieving it from the service locator and update the support url:\nvar dependencyResolver = this.GetDependencyResolver(); var automaticSupportService = dependencyResolver.ResolveType\u0026lt;IAutomaticSupportService\u0026gt;(); automaticSupportService.SupportUrl = \u0026quot;http://mywebsite/support/supportapp.exe\u0026quot;;  Automatic support support with UI When using the UI, it will handle the progress events of the service automatically. The only thing to do is show the window to the user using the code below:\nuiVisualizerService.Show\u0026lt;RequestSupportViewModel\u0026gt;();  Automatic support without UI If you don\u0026rsquo;t want a window to show to the end-user, use the following code:\nautomaticSupportService.DownloadAndRun();  "
},
{
	"uri": "http://opensource.wildgums.com/orc.commandline/",
	"title": "Orc.CommandLine",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.CommandLine\nUse command line the easy way.\nQuick introduction Using this library is easy:\npublic class MyContext : ContextBase { [Option(' ', \u0026quot;\u0026quot;, HelpText = \u0026quot;The file name to start with\u0026quot;)] public string FileName { get; set; } [Option('b', \u0026quot;bool\u0026quot;, AcceptsValue = false, HelpText = \u0026quot;Some boolean switch\u0026quot;)] public bool BooleanSwitch { get; set; } [Option('i', \u0026quot;int\u0026quot;, HelpText = \u0026quot;Some integer switch\u0026quot;)] public int IntegerSwitch { get; set; } [Option('s', \u0026quot;string\u0026quot;, HelpText = \u0026quot;Some string switch\u0026quot;)] public string StringSwitch { get; set; } }  Then use this code:\n// Environment.CommandLine also contains current application path, it is removed with this extension method var commandLine = Environment.CommandLine.GetCommandLine(true); var context = new MyContext(); var validationContext = commandLineParser.Parse(commandLine, context); if (validationContext.HasErrors) { // something bad happened return; } if (context.IsHelp) { // Use the IHelpWriterService to output the help var helpContent = helpWriterService.ConvertToString(context); // TODO: write to console or show as a message box return; } // Handle the context here  This will successfully parse a command line like this:\nmyapp.exe somefile /b -string somestring /i 42  Allowed switches The library supports 2 types of switches, / and -. For example:\n -b -string /b /string  An option definition has a short and long name. Both can be used as a switch.\nAccepts value The AcceptsValue property should only be used on boolean properties. When they are specified, they are assumed to be true (defaulting to false).\nProcessoring raw values It\u0026rsquo;s possible to retrieve all key/value pairs passed in the command line, even when switches are not specified upfront. This is extremely useful in scenarios where the command line is used to override dynamic properties.\nvar rawValues = context.RawValues; myValue = rawValues[\u0026quot;someswitch\u0026quot;];  The RawValues dictionary is case-insensitive.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/",
	"title": "Orc.Controls",
	"tags": [],
	"description": "",
	"content": "   Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Controls\nRun the demo project to see the controls in action:\n\rAnimatedGif\r\r\rBindableRichTextBox\r\r\rColorLegend\r\r\rColorPicker\r\r\rConnectionStringBuilder\r\r\rCulturePicker\r\r\rDatePicker\r\r\rDateRangePicker\r\r\rDateTimePicker\r\r\rDbProviderPicker\r\r\rDirectoryPicker\r\r\rDropDownButton\r\r\rExpander\r\r\rFilterBox\r\r\rFramerateCounter\r\r\rHeaderBar\r\r\rLinkLabel\r\r\rListTextBox\r\r\rLogViewer\r\r\rNumericTextBox\r\r\rOpenFilePicker\r\r\rPinnableTooltips\r\r\rSaveFilePicker\r\r\rStackGrid\r\r\rTabControl\r\r\rTimeSpanPicker\r\r\rValidationContextControl\r\r\rWatermarkTextBox\r\r\r"
},
{
	"uri": "http://opensource.wildgums.com/orc.csvhelper/",
	"title": "Orc.CsvHelper",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.CsvHelper\nSmall library of extensions and helper methods for the CsvHelper library.\n Static methods are provided to read or write to a csv file with one line of code. Sensible configuration options are provided out of the box (but can be overwritten if needed). Reading from a csv file will not lock it. Capture a meaningful error message when an exception is thrown while reading a csv file.  Features  Code generation =\u0026gt; Use static class CodeGeneration for generating C# POCO classes and their associated maps.  /// \u0026lt;summary\u0026gt; /// Create CSharp files to consume CSV files. /// A standard POCO cs file as well as the CsvHelper Mapping cs file will be created. /// All properties in the POCO will be of type string. So please update accordingly. /// \u0026lt;/summary\u0026gt; public static class CodeGeneration { public static void CreateCSharpFilesForAllCsvFiles(string inputFoler, string namespaceName, string outputFolder) { var csvFiles = GetCsvFiles(inputFoler); foreach (var csvFile in csvFiles) { CreateCSharpFiles(csvFile, namespaceName, outputFolder); } } ... }   CsvReader helper =\u0026gt; Use static class CsvReaderHelper for reading csv files with a single line of code.  public static IEnumerable\u0026lt;T\u0026gt; ReadCsv\u0026lt;T\u0026gt;(string csvFilePath, Action\u0026lt;T\u0026gt; initializer = null, Type mapType = null, CsvConfiguration csvConfiguration = null, bool throwOnError = false) or public static IEnumerable\u0026lt;T\u0026gt; ReadCsv\u0026lt;T\u0026gt;(string csvFilePath, CsvClassMap map, Action\u0026lt;T\u0026gt; initializer = null, CsvConfiguration csvConfiguration = null, bool throwOnError = false)  Example:\nvar records = CsvWriterHelper.ReadCsv\u0026lt;MyClass\u0026gt;(scvFilePath, MyClassMap);   CsvWriter helper =\u0026gt; Use static class CsvWriterHelper for writing records into a csv file.  public static void WriteCsv\u0026lt;TRecord, TMap\u0026gt;(IEnumerable\u0026lt;TRecord\u0026gt; records, string csvFilePath, CsvConfiguration csvConfiguration = null, bool throwOnError = false)   CsvExtensions =\u0026gt; for writing object collections into a csv file using the ToCsv() method.  public static void ToCsv\u0026lt;TRecord\u0026gt;(this IEnumerable\u0026lt;TRecord\u0026gt; records, string csvFilePath, Type csvMap = null, CsvConfiguration csvConfiguration = null, bool throwOnError = false)  Example:\nrecords.ToCsv\u0026lt;MyClass\u0026gt;(csvFilePath, typeof(MyClassMap));  Converters  EnumConverter - generic string to enum converter StringToNullableDateTimeConverter - converts string to DateTime? type YesNoToBooleanConverter - converts \u0026ldquo;yes\u0026rdquo; and \u0026ldquo;no\u0026rdquo; strings to true and false values correspondingly TypeConverter - generic type converter which in some cases is more fluent than the default one  public class EmployeeMap : CsvClassMap\u0026lt;Employee\u0026gt; { public EmployeeMap() { Map(x =\u0026gt; x.Name).Name(\u0026quot;Name\u0026quot;); Map(x =\u0026gt; x.StartDate).Name(\u0026quot;StartDate\u0026quot;); // Parse the enum. Use EmployeeRate.PerHour on failure. Map(x =\u0026gt; x.Rate).Name(\u0026quot;Rate\u0026quot;) .TypeConverter(new EnumConverter\u0026lt;EmployeeRate\u0026gt;(EmployeeRate.PerHour)); // Parse nullable DateTime value Map(x =\u0026gt; x.DischargeDate).Name(\u0026quot;DischargeDate\u0026quot;); .TypeConverter(new NullableDateTimeConverter()); // Parse Yes and No string values as booleans Map(x =\u0026gt; x.Married).Name(\u0026quot;Married\u0026quot;); .TypeConverter(new YesNoToBooleanConverter()); Map(x =\u0026gt; x.WorkDayDuration).Name(\u0026quot;WorkDayDuration\u0026quot;) .TypeConverter(new TypeConverter\u0026lt;TimeSpan\u0026gt;((hours) =\u0026gt; return new TimeSpan(Convert.ToDouble(hours), 0, 0))); } }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.csvtexteditor/",
	"title": "Orc.CsvTextEditor",
	"tags": [],
	"description": "",
	"content": "   Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.CsvTextEditor\nCsv text editor component based on AvalonEdit.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.dbtocsv/",
	"title": "Orc.DbToCsv",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.DbToCsv\nThis library\u0026rsquo;s sole purpose is to extract data from a MS SQL database into csv files. Each table or view will have a corresponding csv file.\nThe repository contains a library, a command line utility and a task runner\nUsage In order to extract the data the library needs a project file. A project file is simply an xml file with an \u0026ldquo;.iprj\u0026rdquo; extension, and looks like:\n\u0026lt;Project xmlns=\u0026quot;http://wildgums/2015\u0026quot;\u0026gt; \u0026lt;ConnectionString\u0026gt;Data Source=.\\SQLExpress;Initial Catalog=MyDbName;Integrated Security=True;Pooling=False\u0026lt;/ConnectionString\u0026gt; \u0026lt;MaximumRowsInTable\u0026gt;500\u0026lt;/MaximumRowsInTable\u0026gt; \u0026lt;OutputFolder\u0026gt;C:\\Temp\\CustomPath\u0026lt;/OutputFolder\u0026gt; \u0026lt;Project.Tables\u0026gt; \u0026lt;Table Name=\u0026quot;MyTable1\u0026quot;/\u0026gt; \u0026lt;Table Name=\u0026quot;MyTable2\u0026quot; Csv=\u0026quot;Table2.csv\u0026quot;/\u0026gt; \u0026lt;Table Name=\u0026quot;MyTable3\u0026quot; Csv=\u0026quot;Table3.csv\u0026quot; Output=\u0026quot;C:\\Temp\u0026quot;/\u0026gt; \u0026lt;/Project.Tables\u0026gt; \u0026lt;/Project\u0026gt;  There are four important tags:\n ConnectionString: Standard connection string to connect to the database table. MaximumRowsInTable: Will specify the number of rows to retrieve from each table. If the tag is missing or the value is 0 or less, then all rows will be retrieved. OutputFolder: Specify the folder the files will be saved to. If left blank the files will be created in the direcotry the console or task runner were executed from. Tables: Specify the name of each table (or view) you want to extract. If left emtpy, all tables will be extracted.  Note: - You can specify the csv file name for each table/view using the Csv attribute. - If the Csv attribute is left blank or does not exist the default file name will be the table name (except white spaces will be replaced with an underscore.) - You can specify a different output directory for each file. If left blank or does not exist the file will be saved in the \u0026ldquo;OutputFolder\u0026rdquo;.\nOnce the project file is setup you can create the csv files using the following command:\npublic static void ProcessProject(string projectFilePath, string outputFolderPath, ILogWriter logWriter)  Example:\nImporter.ProcessProject(projectFilePath, outputFolderPath, new ConsoleWriter());  The parameters are:\n projectFilePath: The path to the .iprj file outputFolderPath: The folder path you want to save the csv files to logWriter: A log writer object  Command line utility (Orc.DbToCsv.Console) Orc.DbToCsv.Console is a simple command line utility.\nThere are two possible command line options:\n -p or -project path to .iprj file. If the option is not defined the utility will try and find a valid project file in the current folder. -o or -output path to the output directory where the csv files will be saved to.  Example:\nOrc.DbToCsv.Console.exe -p E:\\sample1.iprj -o D:\\output  Task Runner "
},
{
	"uri": "http://opensource.wildgums.com/orc.dependencygraph/",
	"title": "Orc.DependencyGraph",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.DependencyGraph\nIntroduction This library will help navigate a directed acyclic graph (DAG).\nThe goal of this library is to make it easy to:\n Find a specific node within a graph. Find all nodes on a certain level of the graph. Find all nodes between two levels of the graph. Find all nodes related to a given node. (i.e. find its decedents and/or its precedents on any level of the graph.) Sort the nodes in topological order  Naming Convention  Descendants. i.e. What descends from or comes after: Child Precedents. i.e What precedes, or comes before: Parent Level. We consider level as topological level of the node. I.e. Level 1 consists of nodes whose Precedents are of Level 0. In general level is the longest path from the node to the root of the graph.  Interface Graph public interface IGraph\u0026lt;T\u0026gt; where T : IEquatable\u0026lt;T\u0026gt; { INode\u0026lt;T\u0026gt; Find(T value); void AddSequence(IEnumerable\u0026lt;T\u0026gt; sequence); void AddSequences(IEnumerable\u0026lt;IEnumerable\u0026lt;T\u0026gt;\u0026gt; sequences); IEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; Nodes { get; } bool CanSort(); bool CanSort(IEnumerable\u0026lt;T\u0026gt; sequence); int CountNodes { get; } int CountLevels { get; } IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; GetNodes(int level); IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; GetNodesBetween(int levelFrom, int levelTo); IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; Sort(); }  Note:\n AddSequence(IEnumerable\u0026lt;T\u0026gt; sequence): the sequence must contain at least 2 items. The relationship between the items is automatically assumed as item1 -\u0026gt; item2 -\u0026gt; item3 etc\u0026hellip;  Node public interface INode\u0026lt;T\u0026gt; where T: IEquatable\u0026lt;T\u0026gt; { T Value { get; } IGraph\u0026lt;T\u0026gt; Graph { get; } int Level { get; } // relativeLevel \u0026gt;= relativeLevelFrom \u0026amp;\u0026amp; relativeLevel \u0026lt;= relativeLevelTo IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; GetNeighbours(int relativeLevelFrom, int relativeLevelTo); // relativeLevel \u0026lt; 0 IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; Precedents { get; } // relativeLevel \u0026gt; 0 IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; Descendants { get; } // relativeLevel == relativeLevel - 1 IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; ImmediatePrecedents { get; } // relativeLevel == relativeLevel + 1 IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; ImmediateDescendants { get; } // Precedents of the node without precedents (roots) IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; TerminatingPrecedents { get; } // Descendants of the node without descendants (leafs) IOrderedEnumerable\u0026lt;INode\u0026lt;T\u0026gt;\u0026gt; TerminatingDescendants { get; } }  Note: - All the methods return an ordered enumerable of INode. The ordering is based on the \u0026ldquo;level\u0026rdquo; of the node. (Within a level the ordering is not important.) - If possible the methods returns all the INodes lazily. - A Node object has a reference to the Graph object.\nAlgorithms, Time Complexity The Dependency Graph is a static data structure. All the nodes and their relationships should be known ahead of time.\n   Method Names Algorithms Time Complexity     AddSequence() - O(1)   AddSequences() - O(1)   Sort() Topological Sort O(V+E)   CanSort() Topological Sort O(V+E)   ComputeLevels() Critical Path, DFS O(E+V)   CountNodes() - O(1)   CountLevels() - O(1)   GetNodesWithLevel() DFS O(V+E)   GetNodesWithLevelBetween() DFS O(V+E)   Precedents() DFS O(V+E)   Descendants() DFS O(V+E)   ImmediatePrecedents() DFS O(V+E)   ImmediateDescendants() DFS O(V+E)   TerminatingPrecedents() DFS O(V+E)   TerminatingDescendants() DFS O(V+E)    ComputeLevels private method ComputeLevels method performs initial pre-calculation (e.g. pre-calculate levels for nodes) Graph will be rebuild automatically on first call of any method related to node levels after a graph structure change.\n Find the longest path. Critical path method O(V+E) DFS from the source of the longest path, decrementing the level value for every child DFS - O(V+E)  Example NOTE:  The root nodes are 11 and 12. The leaf nodes are 61 and 62 This graph has 6 levels. The root nodes have a level value equal to 0  Create Graph Structure new Graph(new [] { new[] {11, 27, 32}, new[] {12, 27}, // etc.... });  or\nvar graph = new Graph(); graph.AddRange(new [] { new[] {11, 27, 32}, new[] {12, 27}, // etc.... });  Interaction [Test] public void BasicOperationsTest() { var graph = CreateExampleGraph(); Assert.IsTrue(graph.CanSort()); Assert.AreEqual(20, graph.Count); Assert.IsTrue(graph.CanSort()); Assert.AreEqual(6, graph.CountLevels); AssertCollectionsConsistsOfNodes(new[] {31}, graph.GetNodes(4)); AssertCollectionsConsistsOfNodes(new[] {51, 61, 62}, graph.GetNodesBetween(4, 5)); AssertCollectionsConsistsOfNodes(new[] {11, 12, 25, 26, 27}, graph.Find(32).Precedents); AssertCollectionsConsistsOfNodes(new[] {51, 61, 62}, graph.Find(43).Descendants); AssertCollectionsConsistsOfNodes(new[] {25, 26, 27}, graph.Find(32).ImmediatePrecedents); AssertCollectionsConsistsOfNodes(new[] {51}, graph.Find(43).ImmediateDescendants); AssertCollectionsConsistsOfNodes(new[] {11, 12}, graph.Find(32).TerminatingPrecedents); AssertCollectionsConsistsOfNodes(new[] {61, 62}, graph.Find(43).TerminatingDescendants); }  Things To Think About  How to return all nodes between two levels that relate to a certain node.  GetNodesRelatedTo(T value, int minLevel == 0, int maxLevel == max) graph.GetNodesRelatedTo(11, 1, 3) =\u0026gt; new[]{27, 32, 46} graph.GetNodesRelatedTo(32, 0, 3) =\u0026gt; new[]{11, 12, 25, 26, 27, 32, 46}   Node.GetNext() Node.GetPrevious()  POIs  There are some ways how we can improve CanSort(sequence) method: We can copy graph much faster if we will find relations using temporary array and node.Key. We can track changes, which were made to graph and UnDo them after the sorting.  Links  http://msdn.microsoft.com/en-us/library/ms379574(v=vs.80).aspx http://en.wikipedia.org/wiki/Critical_path_method  "
},
{
	"uri": "http://opensource.wildgums.com/orc.dynamicobjects/",
	"title": "Orc.DynamicObjects",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.DynamicObjects\nIntroduction In .NET, it is possible to create fully dynamic objects. This makes it possible to create types of which the members are not yet known at compile time.\n@alert info For more information about dynamic programming, see MSDN. @end\nCreating dynamic objects Creating a dynamic object with full Catel functionality is easy. Just add the Orc.DynamicObjects reference via NuGet and create a class that derives from DynamicModelBase:\npublic class DynamicModel : DynamicModelBase { // TODO: Add custom functionality if required }  Then the dynamic model can be used like this:\ndynamic model = new DynamicModel(); model.NonExistingProperty = \u0026quot;a dynamic value\u0026quot;; Console.WriteLine(model.NonExistingProperty);  @alert important It is important to know that you must use the keyword dynamic to instantiate the type. @end\nUsing ModelBase functionality The DynamicModelBase class derives from ModelBase. However it must be preceded by the dynamic keyword. To use the ModelBase functionality, cast it to the right type:\ndynamic model = new DynamicModel(); model.NonExistingProperty = \u0026quot;a dynamic value\u0026quot;; // Note: the Validate method is available on the ModelBase var modelBase = (ModelBase)model; modelBase.Validate();  Supporting serialization of dynamic objects Dynamic objects in Catel fully support the default serialization that Catel provides. To example below shows how to serialize a dynamic object:\ndynamic model = new DynamicModel(); model.NonExistingProperty = \u0026quot;a dynamic value\u0026quot;; var serializer = SerializationFactory.GetXmlSerializer(); using (var memoryStream = new MemoryStream()) { var dynamicModel = (DynamicModel)model; serializer.Serialize(dynamicModel, memoryStream); memoryStream.Position = 0L; dynamic deserializedModel = serializer.Deserialize(typeof(DynamicModel), memoryStream); var deserializedDynamicModel = (DynamicModel) deserializedModel; // deserializedDynamicModel is now a dynamically deserialized object }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.entityframework/",
	"title": "Orc.EntityFramework",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat     EntityFramework 5\n   Name Badge     Downloads    Stable version    Unstable version     EntityFramework 6\n   Name Badge     Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.EntityFramework\nIntroduction This library contains services to work with EntityFramework using repositories and Unit of Work (UoW).\nContext Creating the code-first models Create a new context with code-first models right-clicking on the solution =\u0026gt; Add =\u0026gt; New item\u0026hellip; Then search for ADO.NET Entity Data Model and give it a name and follow the wizard.\nCustomizing the code-first models By default the code-first models aren\u0026rsquo;t very smart. To add additional functionality such as validation, change notifications, etc, it is best to let it derive from ModelBase. To do so, make all entities derive from ModelBase as shown in the example below:\n[Table(\u0026quot;person\u0026quot;)] public partial class Person : ModelBase { [StringLength(50)] public string FirstName { get; set; } [StringLength(50)] public string lastname { get; set; } public long PersonId { get; set; } public long FamilyId { get; set; } public virtual Family Family { get; set; } }  When the classes are derived from ModelBase, EF will try to serialize all the default Catel properties as well. To make sure that EF ignores the Catel properties, go to the Context class and search for the OnModelCreating method. Then add the IgnoreCatelProperties extension method to all entity definitions as shown in the example below:\nprotected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity\u0026lt;Family\u0026gt;() .IgnoreCatelProperties() .Property(e =\u0026gt; e.FamilyName) .IsUnicode(false); modelBuilder.Entity\u0026lt;Family\u0026gt;() .HasMany(e =\u0026gt; e.Person) .WithRequired(e =\u0026gt; e.Family) .WillCascadeOnDelete(false); }  Repositories Creating repositories Once the DAL is correctly set up, it\u0026rsquo;s time to create the repositories. Creating repositories with Catel is super easy. Just create (or generate with T4) a class and interface for each entity:\npublic class FamilyRepository : EntityRepositoryBase\u0026lt;family, int\u0026gt;, IFamilyRepository { public FamilyRepository(DbContext dbContext) : base(dbContext) { } } public interface IFamilyRepository : IEntityRepository\u0026lt;family, int\u0026gt; { }  Registering repositories In order for the unit of work to find the repositories, they need to be registered in the ServiceLocator. This can be done as follows:\nvar serviceLocator = ServiceLocator.Default; serviceLocator.RegisterType\u0026lt;IFamilyRepository, FamilyRepository\u0026gt;();  Unit of Work Retrieving data To retrieve data inside a transaction, you can use the UnitOfWork. Inside a method / service call / view model, use the following code:\nusing (var uow = new UnitOfWork\u0026lt;FamilyContext\u0026gt;()) { var familyRepository = uow.GetRepository\u0026lt;IFamilyRepository\u0026gt;(); var families = new ObservableCollection\u0026lt;family\u0026gt;(familyRepository.GetAll()); // TODO: Do something with all families }  @alert info Catel will automatically take care of scoping of the DbContext when using unit of work and repositories @end\nSaving data To save data, the entities must be updated in the repositories and then saved in the unit of work. Below is an example, assuming the list of families contains updated entities:\nusing (var uow = new UnitOfWork\u0026lt;FamilyContext\u0026gt;()) { var familyRepository = uow.GetRepository\u0026lt;IFamilyRepository\u0026gt;(); var personRepository = uow.GetRepository\u0026lt;IPersonRepository\u0026gt;(); foreach (var family in families) { familyRepository.Update(family); } uow.SaveChanges(); }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.extensibility/",
	"title": "Orc.Extensibility",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Extensibility\nThis library provides classes to support pluggable components inside applications (discovery, instantation, etc).\nConfiguring the API The API library is the library that exposes the types and interfaces that can be used by any plugin to interact with the host. In most cases, the API will expose the interface for services which are implemented in the host. In a minimal case, the API will only expose a type that will be used to recognize a plugin. For example the plugin interface shown below;\npublic interface ICustomPlugin { Task InitializeAsync(); }  Configuring the host The host is responsible for finding and instantiating the plugins.\nPluginFinder The library takes care of the hard work. The only thing that it needs to know is whether a type is a plugin. This can be configured by creating a class deriving from PluginFinderBase:\npublic class PluginFinder : Orc.Extensibility.PluginFinderBase { private readonly string _pluginName = typeof(ICustomPlugin).Name; public PluginFinder(IPluginLocationsProvider pluginLocationsProvider, IPluginInfoProvider pluginInfoProvider, IPluginCleanupService pluginCleanupService, IDirectoryService directoryService, IFileService fileService) : base(pluginLocationsProvider, pluginInfoProvider, pluginCleanupService, directoryService, fileService) { } protected override bool IsPlugin(Type type) { // Note: since we are in a reflection-only context here, you can't compare actual types, but need to use string names return (from iface in type.GetInterfacesEx() where iface.Name.Equals(_pluginName) select iface).Any(); } }  Note that it should also be registered in the ServiceLocator:\nServiceLocator.Default.RegisterType\u0026lt;IPluginFinder, PluginFinder\u0026gt;();  Finding and loading the plugins It\u0026rsquo;s possible to allow a single plugin host or a multiple plugin host. This example shows how to use the single plugin host:\n// In an Orchestra environment, this would go into the bootstrapper var configurationService = serviceLocator.ResolveType\u0026lt;IConfigurationService\u0026gt;(); var activePlugin = configurationService.GetRoamingValue(ConfigurationKeys.ActivePlugin, ConfigurationKeys.ActivePluginDefaultValue); var singlePluginService = serviceLocator.ResolveType\u0026lt;ISinglePluginService\u0026gt;(); var plugin = singlePluginService.ConfigureAndLoadPlugin(activePlugin, ConfigurationKeys.ActivePluginDefaultValue); if (plugin != null) { serviceLocator.RegisterInstance(typeof(ICustomPlugin), plugin.Instance); }  Creating a plugin Last but not least, plugins will need to be created, but this is extremely easy.\n Create a class library project and reference the API library\n Create a new plugin as shown below:\npublic class PluginA : ICustomPlugin { private readonly IMessageService _messageService; private readonly IHostService _hostService; public PluginA(IMessageService messageService, IHostService hostService) { Argument.IsNotNull(() =\u0026gt; messageService); Argument.IsNotNull(() =\u0026gt; hostService); _messageService = messageService; _hostService = hostService; } public async Task InitializeAsync() { await _messageService.ShowAsync(\u0026quot;Plugin A has been loaded, setting color to red\u0026quot;); _hostService.SetColor(Colors.Red); } }  Make sure to compile the plugin library and putting it into a location so the host can find it.\n  "
},
{
	"uri": "http://opensource.wildgums.com/orc.feedback/",
	"title": "Orc.Feedback",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Feedback\nAllows the user to easily get feedback from the end-user.\nInitializing the service It is very important to initialize the service. It can be done by retrieving it from the service locator and update the required data:\nvar dependencyResolver = this.GetDependencyResolver(); var feedbackService = dependencyResolver.ResolveType\u0026lt;IFeedbackService\u0026gt;(); feedbackService.SomeProperty = \u0026quot;http://myfeedbackwebsite\u0026quot;;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.fileassociation/",
	"title": "Orc.FileAssociation",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.FileAssociation\nMakes it easy to associate files with your application.\nQuick introduction Using this library is easy. You need to register the app, then let the user associate files with it. This library does not require elevation, it only applies the file association for the current user.\nApplication registration Registering an application It is important to register an application. This way Windows knows that the application supports specific file types. To register an application, use the following code:\nvar assembly = AssemblyHelper.GetEntryAssembly(); var applicationInfo = new ApplicationInfo(assembly); _applicationRegistrationService.RegisterApplication(applicationInfo);  When using an assembly for the ApplicationInfo, the library will extract all the relevant information from the assembly directly.\nUnregistering an application When an application is being uninstalled, you need to remove all the required registry entries. This can be done by using the following code:\nvar assembly = AssemblyHelper.GetEntryAssembly(); var applicationInfo = new ApplicationInfo(assembly); _applicationRegistrationService.RegisterApplication(applicationInfo);  Updating a registered application To always keep the registry up to date, you can call this method at the startup of your app (note that this does not require elevation or administrator rights):\nvar assembly = AssemblyHelper.GetEntryAssembly(); var applicationInfo = new ApplicationInfo(assembly); _applicationRegistrationService.UpdateApplication(applicationInfo);  File association To allow a user to pick your app as the default one for a file type, you need to use the IFileAssociationService as shown below:\nvar assembly = AssemblyHelper.GetEntryAssembly(); var applicationInfo = new ApplicationInfo(assembly); _fileAssociationService.AssociateFilesWithApplication(applicationInfo.Name);  Example application This repository contains an example application that allows developers to test the logic and see how the library should be used. Below are a few screenshots:\nAdditional notes / credits This library is based on this StackOverflow answer:\nhttp://stackoverflow.com/questions/29847034/how-to-show-set-program-associations-window-in-windows-8-8-1\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.filesystem/",
	"title": "Orc.FileSystem",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.FileSystem\nThis library wraps file system methods inside services. The advantages are:\n All operations are being logged and can easily be accessed (even in production scenarios) All operations are wrapped inside try/catch so all failures are logged as well Services allow easier mocking for unit tests  FileService The FileService provides the following methods:\n FileStream Create(string fileName) void Copy(string sourceFileName, string destinationFileName, bool overwrite = false) void Move(string sourceFileName, string destinationFileName, bool overwrite = false) bool Exists(string fileName) void Delete(string fileName) FileStream Open(string fileName, FileMode fileMode, FileAccess fileAccess = FileAccess.ReadWrite)  DirectoryService The DirectoryService provides the following methods:\n string Create(string path) void Move(string sourcePath, string destinationPath) void Delete(string path, bool recursive) bool Exists(string path) string[] GetDirectories(string path, string searchPattern = \u0026ldquo;\u0026rdquo;, SearchOption searchOption = SearchOption.TopDirectoryOnly) string[] GetFiles(string path, string searchPattern = \u0026ldquo;\u0026rdquo;, SearchOption searchOption = SearchOption.TopDirectoryOnly)  IOSynchronizationService The IOSynchronizerService can take care of synchronized blocks of reading and/or write to a specific directory or file. This provides an easy way to \u0026ldquo;lock\u0026rdquo; a directory or file until the director/file has been released. For example, when writing several files that need to lock a directory until all files are written, this class can come in handy. The examples below all use a projectDirectory variable to use as base path. This will also be the path to be locked.\nStart watching for changes ioSynchronizationService.RefreshRequired += OnIoSynchronizationServiceRefreshRequired; await ioSynchronizationService.StartWatchingForChangesAsync(projectDirectory);  Writing files The writing of the files can happen in a completely different app, the services will take care of the synchronization automatically. To write files, use the following code:\nvar file1 = Path.Combine(projectDirectory, \u0026quot;file1.txt\u0026quot;); var file2 = Path.Combine(projectDirectory, \u0026quot;file2.txt\u0026quot;); await ioSynchronizationService.ExecuteWritingAsync(projectDirectory, async x =\u0026gt; { fileService.WriteAllText(file1, \u0026quot;sample content\u0026quot;); fileService.WriteAllText(file2, \u0026quot;sample content\u0026quot;); return true; });  Reading files To read files, use the following code:\nvar file1 = Path.Combine(projectDirectory, \u0026quot;file1.txt\u0026quot;); var file2 = Path.Combine(projectDirectory, \u0026quot;file2.txt\u0026quot;); var file1Contents = string.Empty; var file2Contents = string.Empty; await ioSynchronizationService.ExecuteReadingAsync(projectDirectory, async x =\u0026gt; { file1Contents = fileService.ReadAllText(file1); file2Contents = fileService.ReadAllText(file2); return true; });  "
},
{
	"uri": "http://opensource.wildgums.com/orc.filterbuilder/",
	"title": "Orc.FilterBuilder",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.FilterBuilder\nFilterBuilder is WPF component which can help you extract key insights from your data, by adding complex filtering functionalities to your application.\nUsage FilterBuilder is developer-friendly component which allows easy integration of complex data filtering functionality with new and existing enterprise applications. The component implementation only requires three steps.\n Include the components project to your application Create two object collections (input and output) Add FilterBuilder component to your application  The component will automatically recognize the objects property types and provide the appropriate filtering options.\nAdding component project to your application Before starting using the FilterBuilder please add the Orc.FilterBuilder project to your application.\nCreate data collections Two data collection should be created: one for input and one for filtered output:\npublic ObservableCollection\u0026lt;TestEntity\u0026gt; RawItems { get; private set; } public ObservableCollection\u0026lt;TestEntity\u0026gt; FilteredItems { get; private set; }  Adding component to your application The control includes two Views (FilterBuilderControl and EditFilterView). FilterBuilderControl is responsible for invocation of EditFilter window and for implementing filtering of the main collection.\nPrior to using the component add the FilterBuilder namespace to your View:\nxmlns:orc=\u0026quot;http://www.wildgums.net.au/orc\u0026quot;  Next include the actual component to your View using the following code:\n\u0026lt;orc:FilterBuilderControl RawCollection=\u0026quot;{Binding RawItems}\u0026quot; FilteredCollection=\u0026quot;{Binding FilteredItems}\u0026quot; /\u0026gt;  The EditFilterView is located in FilterBuilder project. It will show the filtering options window to the end user.\nNote: Before using the control please add Catel and Catel MVVM libraries to the project via nugget.\nInstall-Package Catel.Core -Pre Install-Package Catel.MVVM -Pre  Customizing component UI The UI can easily be adjusted to any design. For example we will demonstrate how to apply the Metro UI theme.\nInstall the appropriate packages via nugget manager.\nOr, through Package Manager Console using bellow commands:\nInstall-Package MahApps.Metro –Pre Install-Package MahApps.Metro.Resources.Standalone  First, modify the test project (Orc.FilterBuilder.Test) by adding the following code to the MainWindow.xaml header:\n\u0026lt;controls:MetroWindow x:Class=\u0026quot;Orc.FilterBuilder.Test.NET40.MainWindow\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:net401=\u0026quot;clr-namespace:Orc.FilterBuilder;assembly=Orc.FilterBuilder\u0026quot; xmlns:controls=\u0026quot;clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro\u0026quot;  Also, reference the Styles in the App.xaml file:\n\u0026lt;Application.Resources\u0026gt; \u0026lt;ResourceDictionary\u0026gt; \u0026lt;ResourceDictionary.MergedDictionaries\u0026gt; \u0026lt;ResourceDictionary Source=\u0026quot;pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml\u0026quot; /\u0026gt; \u0026lt;ResourceDictionary Source=\u0026quot;pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml\u0026quot; /\u0026gt; \u0026lt;ResourceDictionary Source=\u0026quot;pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml\u0026quot; /\u0026gt; \u0026lt;ResourceDictionary Source=\u0026quot;pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml\u0026quot; /\u0026gt; \u0026lt;ResourceDictionary Source=\u0026quot;pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml\u0026quot; /\u0026gt; \u0026lt;/ResourceDictionary.MergedDictionaries\u0026gt; \u0026lt;/ResourceDictionary\u0026gt; \u0026lt;/Application.Resources\u0026gt;  Compile the sample project and you should see the basic Metro UI style applied to your application.\nTo customize the FilterBuilder Controller, reference the above libraries in the Orc.FilterBuilder project.\nAdd Resources folder along with necessary files to the Control project. Also, in the EditFilterView.xaml modify the ResourceDictionary section as follows:\n\u0026lt;ResourceDictionary\u0026gt; \u0026lt;net40:ConditionTreeItemConverter x:Key=\u0026quot;ConditionTreeItemConverter\u0026quot; /\u0026gt; \u0026lt;BooleanToVisibilityConverter x:Key=\u0026quot;VisibilityConverter\u0026quot;/\u0026gt; \u0026lt;net40:ValueControlTypeVisibilityConverter x:Key=\u0026quot;ValueControlTypeVisibilityConverter\u0026quot;/\u0026gt; \u0026lt;ResourceDictionary.MergedDictionaries\u0026gt; \u0026lt;ResourceDictionary Source=\u0026quot;Resources\\Icons.xaml\u0026quot; /\u0026gt; \u0026lt;/ResourceDictionary.MergedDictionaries\u0026gt; \u0026lt;/ResourceDictionary\u0026gt;  To customize the style of the buttons add the MetroCircleButtonStyle and appropriate icon reference from the specified StaticResource (appbar_add) :\n\u0026lt;Button BorderThickness=\u0026quot;0\u0026quot; ToolTip=\u0026quot;Add expression\u0026quot; Margin=\u0026quot;3,0,0,0\u0026quot; Command=\u0026quot;{Binding DataContext.AddExpressionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}\u0026quot; CommandParameter=\u0026quot;{Binding}\u0026quot; Style=\u0026quot;{DynamicResource MetroCircleButtonStyle}\u0026quot;\u0026gt; \u0026lt;Rectangle Width=\u0026quot;20\u0026quot; Height=\u0026quot;20\u0026quot;\u0026gt; \u0026lt;Rectangle.Fill\u0026gt; \u0026lt;VisualBrush Stretch=\u0026quot;Fill\u0026quot; Visual=\u0026quot;{StaticResource appbar_add}\u0026quot; /\u0026gt; \u0026lt;/Rectangle.Fill\u0026gt; \u0026lt;/Rectangle\u0026gt; \u0026lt;/Button\u0026gt;  Compile the project, and enjoy!\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.fluentvalidation/",
	"title": "Orc.FluentValidation",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.FluentValidation\nThe validation in Catel is extremely flexible, at this point you must already know it, but sometimes it is just not enough or you are forced to use external validators.\nNote that the FluentValidation extension can be used in combination with Catel.Core only, so it is not required to combine it with the MVVM framework\nFluentValidation is a small validation library for .NET that uses a fluent interface and lambda expressions for building validation rules for your business objects. Catel provides an extension in order to use FluentValidation as a validation library.\nThe only thing you have to do is install an isolate package named Orc.FluentValidation, available via NuGet, then you will be able to write your view models validations using FluentValidation approach.\npublic class PersonViewModelValidator : AbstractValidator\u0026lt;PersonViewModel\u0026gt; { public PersonViewModelValidator() { RuleFor(person =\u0026gt; person.FirstName).NotEmpty(); RuleFor(person =\u0026gt; person.LastName).NotEmpty().WithMessage(\u0026quot;Please specify the last name\u0026quot;); } }  In order to retrieve the right validators, you must register the FluentValidatorProvider:\nServiceLocator.Default.RegisterType\u0026lt;IValidatorProvider, FluentValidatorProvider\u0026gt;();  The FluentValidatorProvider will automatically retrieve the right validators associated with the view models.\nHow to handle all Catel validation concepts with fluent validation classes? Catel handle concepts like field or business rules errors and warnings. So, it\u0026rsquo;s necessary map the fluent validation class to the specific Catel validation using ValidationDescriptionAttribute.\n[ValidatorDescription(Tag = \u0026quot;Person\u0026quot;, ValidationResultType = ValidationResultType.Error, ValidationType = ValidationType.Field)] public class PersonViewModelValidator : AbstractValidator\u0026lt;PersonViewModel\u0026gt; { }  How does the FluentValidationProvider works?\nFluentValidationProvider is an implementation of IValidationProvider (see Validation via IValidator). It searches for all validators classes that implement FluentValidation.IValidator interface, that also can validate the view model type.\nA view model can have one or more validators, so FluentValidationProvider aggregates all validators in a single one using CompositeValidator class. For performance reasons FluentValidationProvider only searches for validators on the assembly which the view model belongs to. Note that FluentValidationProvider does not use NamingConventions\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.licensemanager/",
	"title": "Orc.LicenseManager",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.LicenseManager\nThis library makes it very easy to manage licenses for commercial software.\nClient validation Internally the license manager uses Portable.Licensing. This is a wrapper around both the server and client to make it very easy to implement license validations.\nThe basics To check a license on the client, we need the public key of the application. It is very important to keep the private key private on the server.\nIt is a good practice to create a License class to contain all this information:\npublic static class License { // The public key of the product public const string ApplicationId = \u0026quot;MIIBKjCB4wYHKoZI.....\u0026quot;; public const string LicenseServer = \u0026quot;https://www.myserver.com/api/license\u0026quot;; }  Validating a license locally The first thing that needs to be done is to validate locally. If the license is not valid, the software will automatically show a license dialog.\nif (!await _simpleLicenseService.Validate(License.ApplicationId, \u0026quot;My Product\u0026quot;, \u0026quot;/MyProduct;component/Resources/Images/logo_0128.png\u0026quot;, \u0026quot;In order to use this software, a license is required.\u0026quot;)()) { // License is not valid, exit software }  Validating a license online It is also possible to check the license on the server as well.\nif (!await _simpleLicenseService.ValidateOnServer(License.LicenseServer, License.ApplicationId, \u0026quot;My Product\u0026quot;, \u0026quot;/MyProduct;component/Resources/Images/logo_0128.png\u0026quot;, \u0026quot;In order to use this software, a license is required.\u0026quot;)()) { // License is not valid, exit software }  Validating the number of licenses used on the network The software can detect the number of licenses used on the current network. It does this by sending UDP broadcast packages over the network with the license signature. All software using the specified license will reply with the IP and the date/time they started using the license. This way it\u0026rsquo;s possible to list all usages and kick out the latest user.\nInitialize The easiest way to use the INetworkLicenseService is to initialize it with a polling value. Then it will automatically raise events when a validation has occurred.\n_networkLicenseService.Validated += OnNetworkLicenseValidated; await _networkLicenseService.Initialize(TimeSpan.FromSeconds(30));  Then you can handle the result of the validation in the event handler:\nprivate async void OnNetworkLicenseValidated(object sender, NetworkValidatedEventArgs e) { var validationResult = e.ValidationResult; if (!validationResult.IsValid) { var latestUsage = (from usage in validationResult.CurrentUsers orderby usage.StartDateTime descending select usage).First(); if (string.Equals(_networkLicenseService.ComputerId, latestUsage.ComputerId)) { await _messageService.Show(string.Format(\u0026quot;License is invalid, using '{0}' of '{1}' licenses. You are the latest user, your software will be shut down\u0026quot;, validationResult.CurrentUsers.Count, validationResult.MaximumConcurrentUsers)); } else { await _messageService.Show(string.Format(\u0026quot;License is invalid, using '{0}' of '{1}' licenses. The latest user is '{2}' with ip '{3}', you can continue working\u0026quot;, validationResult.CurrentUsers.Count, validationResult.MaximumConcurrentUsers, latestUsage.ComputerId, latestUsage.Ip)); } } }  Manually validating the network To manually perform a check, use the following code:\nvar validationResult = await _networkLicenseService.Validate();  Server validation [server documentation must be written yet]\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.logviewer/",
	"title": "Orc.LogViewer",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.LogViewer\nAn advanced log viewer for WPF applications.\nRun the demo project to see the control in action:\nUse level toggle buttons to show/hide log records:\nStart typing in filter box to filter log records:\nSelect a type name in combobox to filter log records by type name:\nUse Time stamp toggle button to show/hide timestamps:\nHow to use LogViewer Here are the main properties, which are used to configure the LogViewer control:\nFiltering:\n Level =\u0026gt; The log records types which will be shown. LogListenerType =\u0026gt; Type. The log listener type. IgnoreCatelLogging =\u0026gt; boolean. Ignore Catel logging if true.  Visualisation:\n ShowFilterBox =\u0026gt; boolean. Show Filter box if true. ShowTypeNames =\u0026gt; boolean. Show Type names combobox if true. AccentColorBrush =\u0026gt; Brush. The accent color.  \u0026lt;orc:AdvancedLogViewerControl AccentColorBrush=\u0026quot;Orange\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.memento/",
	"title": "Orc.Memento",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Memento\nIntroduction Lots of real world applications need to implement undo/redo. However, most applications written in MVVM lack this feature because it is very hard to implement. Luckily, Catel solves this issue by introducing the IMementoService. The IMementoService is a service that allows a developer to register custom actions that should be undone. A few actions you can think of:\n Property change of a model Item is added or removed to/from a collection A method is executed  One way to introduce the memento pattern is by creating a copy of the whole memory at each step (yes, some people actually do this), but in Catel it is done a bit smarter. For each possible action type, there is an implementation of the UndoBase. This way, each action will know by itself how to undo or redo. Catel offers the following default implementations:\n PropertyChangeUndo CollectionChangeUndo ActionUndo  If there are more actions supported, it is possible to write a custom UndoBase implementation and add the specific action to the IMementoService. It will automatically be added to the undo/redo action stack.\nUndo and redo support The IMementoService supports both undo and redo actions. This means that an action that is undo-ed by a call to the Undo method, it is automatically added to the redo stack when redo is supported.\nTo undo an action, use the code below:\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.Undo();  It is possible to check whether it is possible to undo actions by using the CanUndo property. This check is not required since the Undo method will also check this internally.\nTo redo an action, use the code below:\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.Redo();  It is possible to check whether it is possible to redo actions by using the CanRedo property. This check is not required since the Redo method will also check this internally.\nGrouping actions in batches The MementoService automatically wraps all actions in batches. Because each action is treated as a batch, it is easy to begin a batch and add several actions to a single batch. Below is the code to create a batch:\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.BeginBatch(\u0026quot;Batch title\u0026quot;, \u0026quot;Batch description\u0026quot;); // All actions added to the memento service are added to the specified batch  Note that the Title and Description are optional. They are however a great way to represent the batches in the user interface\nA batch can be ended in several ways:\n A call to EndBatch A call to BeginBatch  As soon as a batch is ended by one of the ways described above, it will be added to the undo stack.\nIgnoring support for memento Ignoring specific properties or methods for the IMementoService is very easy. Just decorate them with the IgnoreMementoSupportAttribute as shown below:\n[IgnoreMementoSupport] public string IgnoredProperty { get; set; }  Memento and properties Adding the ability to undo and redo property changes on an object is very simple using the PropertyChangeUndo class. This can be done either automatically or manually.\nHandling property changes automatically When an object implements the INotifyPropertyChanged interface, it is possible to register the object. The IMementoService will fully take care of any property changes by the object and add these automatically to the undo/redo stack. Internally, the service will create an instance of the ObjectObserver which will register the changes in the IMementoService.\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.RegisterObject(myObject);  Handling property changes manually When an object does not support the INotifyPropertyChanged interface or you want more control, it is possible to instantiate the PropertyChangeUndo yourself. See the example below:\npublic string Name { get { return _name; } set { object oldValue = _name; object newValue = value; _name = value; RaisePropertyChanged(\u0026quot;Name\u0026quot;); var mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.Add(new PropertyChangeUndo(this, \u0026quot;Name\u0026quot;, oldValue, newValue)); } }  Removing an object and its actions When a model goes out of scope, it is important that the IMementoService does not keep it in memory and keeps undoing the changes. Therefore, one should also unregister the object:\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.UnregisterObject(myObject);  Note that unregistering an object will both cancel change notifications and remove the actions that belong to this object from the undo/redo stack\nMemento and collections Adding the ability to undo and redo collection changes on a collection is very simple using the CollectionChangeUndo class. This can be done either automatically or manually.\nHandling collection changes automatically When a collection implements the INotifyCollectionChanged interface, it is possible to register the collection. The IMementoService will fully take care of any collection changes by the collection and add these automatically to the undo/redo stack. Internally, the service will create an instance of the CollectionObserver which will register the changes in the IMementoService.\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.RegisterCollection(myCollection);  Handling collection changes manually When an object does not support the INotifyCollectionChanged interface or you want more control, it is possible to instantiate the CollectionChangeUndo yourself. See the example below:\npublic void AddPerson(IPerson person) { var newIndex = _internalCollection.Add(person); var mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.Add(new CollectionChangeUndo(_internalCollection, CollectionChangeType.Add, -1, newIndex, null, item)); }  Note that all actions should be implemented, such as adding, replacing, removing and resetting to fully support undo/redo\nRemoving a collection and its actions When a collection goes out of scope, it is important that the IMementoService does not keep it in memory and keeps undoing the changes. Therefore, one should also unregister the collection:\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.UnregisterCollection(myCollection);  Note that unregistering a collection will both cancel change notifications and remove the actions that belong to this collection from the undo/redo stack\nMemento and methods Adding the ability to undo and redo methods is the most complex, because this cannot be done automatically. However, it is possible to use the ActionUndo class to make it as easy as possible.\nHandling methods manually An action can come in two flavors. One with only undo support, and one with redo support. It is always recommended to implement the one with support for redo, but the choice is always yours. For this example, let\u0026rsquo;s assume a simple class that will increase a value (for which we are building undo/redo support):\npublic class SpecialNumberContainer() { private int _number = 5; public int Number { get { return _number; } } public int IncreaseNumber() { _number++; } }  As you can see in the example, it is not possible to use the PropertyChangeUndo because the property has no setter and no change notification. So, we will create custom actions for undo/redo.\nFirst, the class with only undo support:\npublic class SpecialNumberContainer() { private int _number = 5; public int Number { get { return _number; } } public int IncreaseNumber() { _number++; var mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.Add(new ActionUndo(this, () =\u0026gt; _number--)); } }  The code above will add a new action to the undo stack every time the IncreaseNumber method is called. Then, it will not add it to the redo stack because redo is not possible (we haven\u0026rsquo;t provided a redo action).\nBelow is the same class, but now with redo support:\npublic class SpecialNumberContainer() { private int _number = 5; public int Number { get { return _number; } } public int IncreaseNumber() { _number++; var mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.Add(new ActionUndo(this, () =\u0026gt; _number--, () =\u0026gt; _number++)); } }  The code above will add a new action to the undo stack every time the IncreaseNumber method is called. Then, when an action is undo-ed, the action is added to the redo stack and it is possible to redo the action because the redo action was provided as well.\nRemoving the actions from the undo/redo stack When an action no longer has to be in the undo/redo stack of the IMementoService, one should call the Clear method with the instance of the method as shown in the sample below:\nvar mementoService = ServiceLocator.Default.ResolveType\u0026lt;IMementoService\u0026gt;(); mementoService.Clear(myInstanceContainingTheMethod);  "
},
{
	"uri": "http://opensource.wildgums.com/orc.metadata/",
	"title": "Orc.Metadata",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Metadata\nThis library provides classes to store metadata about objects. This metadata isn\u0026rsquo;t necessarily stored inside the object itself, allowing the developer to keep track of additional information besides the information stored in the object.\nFor the final interaction with the metadata, it is unknown where the information is coming from (the object itself or metadata stored somewhere else). The developer only has to work with the IMetadata and IMetadataCollection interfaces.\nUsing the metadata interfaces There are 2 important interfaces inside this library:\n IMetadataCollection =\u0026gt; definition or description of the metadata (for example, properties) collection IMetadata =\u0026gt; the actual interaction adapter between the generic metadata and the actual object instance  Retrieving type information To retrieve type information about an object, the information is stored in one of the IMetadataCollection implementations. The developer only has to work with the IMetadataCollection interface. To retrieve the information, use the code below:\nvar allMetadata = metadataCollection.All; foreach (var metadata in allMetadata) { Console.WriteLine(metadata.Name); }  Retrieving metadata of a specific object To retrieve the metadata of a specific object, use the code below:\nvar metadata = metadataCollection.GetMetadata(\u0026quot;MyMetadataName\u0026quot;); var metadataValue = metadata.GetValue(myInstance);  Using reflection metadata classes The reflection metadata classes will use reflection to retrieve metadata information from an object.\nCreating the metadata collection var metadataCollection = new ReflectionMetadataCollection(typeof(MyModel));  Now the metadata collection can be used to retrieve any properties from the MyModel class and use the IMetadata to get or set property values.\nUsing dictionary metadata classes One way to store information separately from the actual object is to use dictionaries. To use dictionaries, it is important to create the metadata collection first.\nCreating the metadata collection The example below creates metadata that contains a few metadata definitions with specific types.\nvar dictionary = new Dictionary\u0026lt;string, Type\u0026gt;(); dictionary[\u0026quot;MyStringMetadata\u0026quot;] = typeof(string); dictionary[\u0026quot;MyIntMetadata\u0026quot;] = typeof(int);  Interacting with the metadata Once a collection of metadata (the specification) is created, one can interact with it with a specific dictionary containing the actual metadata:\nvar metadataDictionary = new Dictionary\u0026lt;string, object\u0026gt;(); dictionary[\u0026quot;MyStringMetadata\u0026quot;] = \u0026quot;myvalue\u0026quot;; dictionary[\u0026quot;MyIntMetadata\u0026quot;] = \u0026quot;42\u0026quot;; var metadata = metadataCollection.GetMetadata(\u0026quot;MyIntMetadata\u0026quot;); var value = metadata.GetValue(metadataDictionary); // Now value is 42  Other ways of storing metadata Of course it\u0026rsquo;s possible to store metadata in any format on any location. To support this, either create an issue to support the format or create a pull request. Another option is to implement it manually inside the final solution where Orc.Metadata is used.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.notifications/",
	"title": "Orc.Notifications",
	"tags": [],
	"description": "",
	"content": "   Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Notifications\nThis library is used to create and display desktop notifications. Notification looks like popup windows and will appear on the top right corner of the screen.\nNotifications can be used to briefly display important information to the user.\nIn order to create notifications in your application use IoC with the INotificationService interface.\nA default Notification class, which implements the INotification interface is provided.\npublic interface INotification { string Title { get; set; } string Message { get; set; } ICommand Command { get; set; } TimeSpan ShowTime { get; set; } SolidColorBrush BorderBrush { get; set; } SolidColorBrush BackgroundBrush { get; set; } SolidColorBrush FontBrush { get; set; } }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.nugetexplorer/",
	"title": "Orc.NuGetExplorer",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.NuGetExplorer\nThis library provides everything you need to explore and download packages from the NuGet gallery as well as any private feed.\nIt can be used as part of a plugin system for your application.\nFeatures  WPF user interface Explore packages that are:  Already installed Available online Ready to be updated  Support package sources, which requires authentication Smart update (Recommends updates for your plugins) Verification of package source Ability to work in the background  NuGet Packages library consists of two NuGet packages:\n Orc.NuGetExplorer =\u0026gt; Core logic, which can be used to work in the background. Orc.NuGetExplorer.Xaml =\u0026gt; Provides the UI for Orc.NuGetExplorer  Screenshots Packages available:\nAvailable updates:\nRecommended updates:\nHow to use NuGetExplorer is made up of several services:\n INuGetConfigurationService =\u0026gt; Configure NuGetExplorer INuGetFeedVerificationService =\u0026gt; Verify the package source feed IPackageBatchService =\u0026gt; Show a window with a list of package to take action on IPackageOperationService =\u0026gt; Execute an operation with the package (Install, Uninstall or Update) IPackageQueryService =\u0026gt; Can be used to search packages in the background IPackagesUIService =\u0026gt; Show the NuGetExplorer window IPackagesUpdatesSearcherService =\u0026gt; Used for searching updates with the options of release/prerelease/recommended IRepositoryService =\u0026gt; Used to get access to specific repositories. Can be used in conjunction with IPackageQueryService  Watcher:\n PackageManagerWatcherBase =\u0026gt; Abstract class, which is used to create a watcher for package management operations  Examples Usage of IPackagesUIService for showing NuGetExplorer dialog box\npublic class NuGetManager { private readonly IPackagesUIService _packagesUiService; public NuGetManager(IPackagesUIService packagesUiService) { Argument.IsNotNull(() =\u0026gt; packagesUiService); _packagesUiService = packagesUiService; } private async Task ShowNuGetDialog() { await _packagesUiService.ShowPackagesExplorer(); } }  Use IPackageBatchService and IPackagesUpdatesSearcherService for checking for updates\npublic class SmartUpdater { private readonly IPackagesUpdatesSearcherService _packagesUpdatesSearcherService; private readonly IPackageBatchService _packageBatchService; public SmartUpdater(IPackageBatchService packageBatchService, IPackagesUpdatesSearcherService packagesUpdatesSearcherService) { Argument.IsNotNull(() =\u0026gt; packageBatchService); Argument.IsNotNull(() =\u0026gt; packagesUpdatesSearcherService); _packageBatchService = packageBatchService; _packagesUpdatesSearcherService = packagesUpdatesSearcherService; } private async Task ShowRecommenedUpdates() { var packages = await _packagesUpdatesSearcherService.SearchForUpdatesAsync(false); await _packageBatchService.ShowPackagesBatchAsync(packages, PackageOperationType.Update); } }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/",
	"title": "Orc.Prism",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat     Prism 5\n   Name Badge     Downloads    Stable version    Unstable version     Prism 6\n   Name Badge     Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Prism\nIntroduction Orc.Prism empowers users to combine both Catel and Prism. The best way to do this is to use the MVVM functionality from Catel and the modularity / UI composition from Prism.\nIf you want to use only a selected feature set of Prism (such as the regions) and don\u0026rsquo;t want to set up a custom bootstrapper, use the following code before creating the main window:\nPrismHelper.PrepareWithoutBootstrapper();  Then call the following code after creating the main window:\nPrismHelper.InitializeMainWindow();  The latest version of the guidance, Prism, includes a feature named \u0026ldquo;User Interface Composition\u0026rdquo;. Basically it allows build a mosaic like application by loading multiple views that comes from different modules into an active regions exposed by a control, also know as the shell.\nBut all this is about view models. Therefore, the Catel team decide to introduce an extension that implements a good starting point in order create a composite user interface without actually referencing any view. At this point, you must have heared about of the UIVisualizerService, and the way it can resolve a view from an instance of a view model. So, we are please to introduce you the UICompositionService.\nMaking the region manager available First of all, you must make available the region manager on the instance of ServiceLocator. A Prism based application uses MEF or Unity as primary IoC container. Therefore, you must synchronize this container with the Catel one, overriding the ConfigureContainer method of the application Bootstrapper class, using the following code:\nprotected override void ConfigureContainer() { base.ConfigureContainer(); if (ServiceLocator.Instance.IsExternalContainerSupported(this.Container)) { ServiceLocator.Instance.RegisterExternalContainer(this.Container); } }  but if you use ServiceLocator primary IoC contanier, and your Bootstrapper class inherits from BootstrapperBase the region manager is actually available and you don\u0026rsquo;t have to write the synchronization container code.\nSince Catel 3.2 ServiceLocator support Dependency injection, therefore now you are able write Prism base application without the usage of a third party container.\nActivating a view into a specific region To activate a view into a specific region, use the following code:\nvar viewModel = new EmployeeViewModel(); var dependencyResolver = this.GetDependencyResolver(); var uiCompositionService = dependencyResolver.Resolve\u0026lt;IUICompositionService\u0026gt;(); uiCompositionService.Activate(viewModel, \u0026quot;MainRegion\u0026quot;);  @alert important Since Catel 4.0 UICompositionService is available for Prism. Use this service instead of the UIVisualizerService extension methods. @end\nBut if the context allows you to know the instance of the view model of the view owner of the region where you will inject a view, is strongly recommended use the Activate overload that allows you to specify the parent view-model. This call will enforce the view models parent-child relationship: uiCompositionService.Activate(viewModel, this, \u0026ldquo;MainRegion\u0026rdquo;);\nAssume that this references an instance of the view-model of a view with MainRegion region specified, so this is used as parent view model reference in the previous call.\nDealing with more than one and only one shell Actually you are able to inject views (referencing it\u0026rsquo;s view models) in any window. Just like the previous example but in combination with the experimental extension method Show:\nvar dependencyResolver = this.GetDependencyResolver(); var uiVisualizerService = dependencyResolver.Resolve\u0026lt;IUIVisualizerService\u0026gt;(); var uiCompositionService = dependencyResolver.Resolve\u0026lt;IUICompositionService\u0026gt;() var windowViewModel = new WindowWithRegionViewModel(); uiVisualizerService.Show(windowViewModel, () =\u0026gt; { uiCompositionService.Activate(new EmployeeViewModel(), windowViewModel, \u0026quot;WindowMainRegion\u0026quot;) });  Deactivating a view To deactivate a view, use the following code:\nuiCompositionService.Deactivate(viewModel);  If you keep your view model alive (see: Keeping view models alive), you can reactivate a deactivated the view using Activate method without specify the region name.\nDeactivating a view automatically If you close the view model using SaveAndCloseViewModelAsync or CancelAndCloseViewModelAsync or CloseViewModelasync methods, the view that belongs to this view model will be automatically deactivated from the region where it is activated.\nIn order to start using this feature, the only thing you have to do is install an isolated package named Orc.Prism, available via NuGet.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.projectmanagement/",
	"title": "Orc.ProjectManagement",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.ProjectManagement\nManage projects the easy way using this library.\nQuick introduction The project management library makes it easy to manage projects. The main component is the IProjectManager that contains the current project and allows to load or save a project. Note that this library does not force you to use a specific project location of any sort, so it can even be a database or server call to read / write the project.\nBelow is an overview of the most important components:\n IProject =\u0026gt; the actual project object IProjectManager =\u0026gt; the project manager with events and management methods IProjectInitializer =\u0026gt; allows customization of initial settings of a project IProjectReader =\u0026gt; reads a project from a location IProjectWriter =\u0026gt; writes a project to a location  Creating a project A project is a model that can be implemented by the developer and must implement the IProject interface. The most convenient way to implement a project is by deriving from the ProjectBase class:\npublic class MyProject : ProjectBase { public Project(string title) : base(title) { } public string FirstName { get; private set; } public string LastName { get; private set; } }  Creating a project initializer When a project manager is created, it doesn\u0026rsquo;t contain anything. The IProjectInitializer interface allows the customization of that state.\nBy default the following initializers are available:\n EmptyProjectInitializer =\u0026gt; initializes nothing, this is the default DirectoryProjectInitializer =\u0026gt; First checks if there is an app config setting called DataLocation. If so, it will use that. If not, it will fall back to %AppData%\\[assembly company]\\[assembly product]\\data. Then it will also check if a command line directory is passed (first argument). If so, all previous will be overriden by the command line directory. FileProjectInitializer =\u0026gt; This will check if a command line file is passed (first argument). If so, it will be used as initial project. Otherwise no project will be loaded.  To create a custom project initializer, see the example below:\nNext it can be registered in the ServiceLocator (so it will automatically be injected into the ProjectManager):\nServiceLocator.Default.RegisterType\u0026lt;IProjectReaderService, MyProjectReaderService\u0026gt;();  Make sure to register the service before instantiating the IProjectManager because it will be injected\nCreating a project validator Sometimes it is possible to check on forehand if it\u0026rsquo;s even possible to load a project. This is implemented via the IProjectValidator interface. By default there is no validation, but this can be implemented. For example when a project represents a folder on disk, the validator can check if the directory exists:\npublic class DirectoryExistsProjectValidator : IProjectValidator { #region IProjectValidator Members public async bool CanStartLoadingProject(string location) { return Directory.Exists(location); } #endregion }  Next it can be registered in the ServiceLocator (so it will automatically be injected into the ProjectManager):\nServiceLocator.Default.RegisterType\u0026lt;IProjectValidator, DirectoryExistsProjectValidator\u0026gt;();  Creating a project reader service Projects must be read via the IProjectReaderService. The project manager automatically knows when to read a project. First, one must create a project reader as shown in the example below:\npublic class ProjectReader : ProjectReaderBase { protected override async Task\u0026lt;IProject\u0026gt; ReadAsync(string location) { var project = new MyProject(location); // TODO: Read from a file / directory / database / anything return project; } }  Next it can be registered in the ServiceLocator (so it will automatically be injected into the ProjectManager):\nServiceLocator.Default.RegisterType\u0026lt;IProjectReaderService, MyProjectReaderService\u0026gt;();  Creating a project writer service public class ProjectWriter : ProjectWriterBase\u0026lt;MyProject\u0026gt; { protected override async Task WriteAsync(MyProject project, string location) { // TODO: Write to a file / directory / database / anything } }  Next it can be registered in the ServiceLocator (so it will automatically be injected into the ProjectManager):\nServiceLocator.Default.RegisterType\u0026lt;IProjectWriterService, MyProjectWriterService\u0026gt;();  Initializing the project manager Because the project manager is using async, the initialization is a separate method. This gives the developer the option to load the project whenever it is required. To (optionally) initialize the project manager, use the code below:\nawait projectManager.Initialize();  Retrieving a typed instance of the project The library contains extension methods for the IProjectManager to retrieve a typed instance:\nvar myProject = projectManager.GetProject\u0026lt;MyProject\u0026gt;();  Detecting project refreshes in the source The library can automatically detect whether the source has changed and the project requires a refresh. It does this using the IProjectRefresher interface.\nCreating a project refresher selector public class ProjectRefresherSelector : IProjectSelector { public IProjectRefresher GetProjectRefresher(string location) { // TODO: Determine what refresher to use, in this case a file refresher return new FileProjectRefresher(location); } }  Next it can be registered in the ServiceLocator (so it will automatically be injected into the ProjectManager):\nServiceLocator.Default.RegisterType\u0026lt;IProjectWriterService, MyProjectWriterService\u0026gt;();  Note that you can also use the DefaultProjectRefresherSelector, which will return the IProjectRefresher that is registered in the ServiceLocator\nCreating a project refresher The library providers a few default implementations:\n DirectoryProjectRefresher FileProjectRefresher  If your projects are a file or a directory of files, it should be sufficient to register it in the service locator:\nServiceLocator.Default.RegisterType\u0026lt;IProjectRefresher, FileProjectRefresher\u0026gt;();  If a custom refresher is required, simply implement it as show in the example below:\npublic class DirectoryProjectRefresher : ProjectRefresherBase { private static readonly ILog Log = LogManager.GetCurrentClassLogger(); public DirectoryProjectRefresher(string location) : base(location) { } protected override void SubscribeToLocation(string location) { // TODO: subscribe to changes here } protected override void UnsubscribeFromLocation(string location) { // TODO: unsubscribe from changes here } }  Then register it in the ServiceLocator or return it in the custom ProjectRefresherSelector.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.scheduling/",
	"title": "Orc.Scheduling",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Scheduling\nAllows easily scheduling of (recurring) tasks inside applications.\nQuick introduction Sometimes (recurring) tasks need to be scheduled inside an application. A few examples are maintenance tasks, check for updates, etc. This scheduling library is exposes a simple service to add scheduled tasks so you can easily schedule tasks without having to set up custom timers or remembering about the recurrance of a task.\nThis library does smart calculations to determine the next important step inside the schedule. It does not simple poll every second but wakes itself up (with a timer) on the next important step so it doesn\u0026rsquo;t use any unnecessary resources.\nControlling the scheduler There are a few important methods to control the state of the scheduler. By default the scheduler is enabled.\nStarting the scheduler schedulingService.Start();  Note that starting the service will immediately start tasks that are scheduled in the past\nStopping the scheduler schedulingService.Stop();  Note that stopping the service will actively cancel all current active tasks\nScheduling tasks The goal of this library is to make it as easy as possible to schedule simple tasks. Below are a few examples.\nSimple tasks The following examples starts a task 5 minutes from now.\nvar scheduledTask = new ScheduledTask { Name = \u0026quot;My task\u0026quot;, Start = DateTime.Now.AddMinutes(5), Action = async () =\u0026gt; { /* logic here */ } }; schedulingService.AddScheduledTask(scheduledTask);  Recurring tasks The following examples starts a task 5 minutes from now, then restarts the task every 1 minute.\nvar scheduledTask = new ScheduledTask { Name = \u0026quot;My task\u0026quot;, Start = DateTime.Now.AddMinutes(5), Recurring = TimeSpan.FromMinutes(1), Action = async () =\u0026gt; { /* logic here */ } }; schedulingService.AddScheduledTask(scheduledTask);  Canceling a running task To cancel a task, you need a handle to a RunningTask instance. This can be retrieved by the TaskStarted event or the RunningTasks property. This example uses the latter, then cancels the task.\nvar runningTask = (from task in schedulingService.RunningTasks where task.ScheduledTask.Name == \u0026quot;My task\u0026quot; select task).FirstOrDefault(); if (runningTask != null) { runningTask.CancellationTokenSource.Cancel(); }  Creating custom ScheduledTask implementations It\u0026rsquo;s possible to write a custom self-containing task that can handle everything itself. Below is an example of such a self-containing task:\npublic class CheckForUpdatesScheduledTask : ScheduledTaskBase { private readonly ICommandManager _commandManager; public CheckForUpdatesScheduledTask(TimeSpan interval, ICommandManager commandManager) { Argument.IsNotNull(() =\u0026gt; commandManager); _commandManager = commandManager; Name = \u0026quot;Check for updates\u0026quot;; Start = DateTime.Now.Add(interval); Recurring = interval; } public override Task InvokeAsync() { var command = _commandManager.GetCommand(AppCommands.Application.CheckForUpdates); if (command != null) { command.Execute(null); } return TaskHelper.Completed; } public override object Clone() { return new CheckForUpdatesScheduledTask(Recurring ?? TimeSpan.FromMinutes(5), _commandManager); } }  This class can be constructed and added to the scheduling service. This will invoke the check for updates 10 minutes from now and recur every 10 minutes.\nvar checkForUpdatesScheduledTask = typeFactory.CreateInstanceWithParametersAndAutoCompletion\u0026lt;CheckForUpdatesScheduledTask\u0026gt;(TimeSpan.FromMinutes(10)); schedulingService.AddScheduledTask(checkForUpdatesScheduledTask);  "
},
{
	"uri": "http://opensource.wildgums.com/orc.search/",
	"title": "Orc.Search",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Search\nEasily add searching to any application.\nUses Lucene in the background.\nSearch Syntax: http://www.lucenetutorial.com/lucene-query-syntax.html\nNuget Packages  [Orc.Search](https://www.nuget.org/packages/Orc.Search/) =\u0026gt; The core of Orc.Search. Contains the main services, base classes and attributes. [Orc.Search.Xaml](https://www.nuget.org/packages/Orc.Search.Xaml/) =\u0026gt; Contains basic Ui elements, which can be used to add seach functionality to your application.  Features  Uses Lucene for the indexing and searching Properties, which need to be indexed should be decorated with the SearchablePropertyAttribute To support highlighting you should create your own search highlight provider, by inheriting from SearchHighlightProviderBase You can redefine the implementation of ISearchService, by creating your own class which will inherit SearchServiceBase and register it using [Catel.IoC.IServiceLocator](http://www.nudoq.org/#!/Packages/Catel.Core/Catel.Core/IServiceLocator) Supports asynchronos searching (uses ISearchServiceExtensions)  Quick start  Create a POCO class to use in your search and decorate the properties with SearchablePropertyAttribute  public class Person { [SearchableProperty(SearchName = \u0026quot;firstname\u0026quot;)] public string FirstName { get; set; } [SearchableProperty(SearchName = \u0026quot;lastname\u0026quot;)] public string LastName { get; set; } public int Age { get; set; } }   Fill the ISearchService with the appropriate \u0026ldquo;Person\u0026rdquo; data using the AddObjects() method. The objects must be wrapped inside an ISearchable implementation, for example the ReflectionSearchable:  searchService.AddObjects(persons.Select(x =\u0026gt; new ReflectionSearchable(x));   Use the Search() method for getting search results. Use the string filter as an argument. Note that you will receive the ISearchable instances that have a hit. This means you can still retrieve the metadata after a search has been completed.  In order to use the asynchronous version of search. Just use the Async suffix method names (i.e. SearchAsync(), AddObjectsAsync(), RemoveObjectsAsync())\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.skia/",
	"title": "Orc.Skia",
	"tags": [],
	"description": "",
	"content": "   Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Skia\nThis library provides a XAML canvas for XAML platforms (WPF \u0026amp; UWP) to provide a DPI-aware Skia canvas.\n@alert important This documentation needs to be written @end\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.snapshots/",
	"title": "Orc.Snapshots",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Snapshots\nManage snapshots the easy way using this library.\nQuick introduction Snapshots are like save games. They represent a set of data and/or values from a specific moment in time in an application. Using snapshots allows an application (and thus eventually the end-user) to store data (in memory, in a file or any in other persistence tech) which can later be retrieved.\nThe advantage of using this library is that it will zip all the data into a single snapshot package. The example below has 3 different providers (they are just examples, it doesn\u0026rsquo;t have to make sense what they are doing):\n ProjectSnapshotProvider =\u0026gt; stores the data in a project to a snapshot DateTimeSnapshotProvider =\u0026gt; stores the current date/time to a snapshot UsernameSnapshotProvider =\u0026gt; stores the current username to a snapshot  Whenever a snapshot is created, the SnapshotManager will:\n Create a zip memory stream For each provider, it will ask the provider to fill up a memory stream which is stored as a separate file Persist the snapshot memory stream to the required persistence store  This will result in the following zip archive:\n Snapshot.zip  ProjectSnapshotProvider.zip =\u0026gt; contains the zipped memory stream of the snapshot provider DateTimeSnapshotProvider.zip =\u0026gt; contains the zipped date/time UsernameSnapshotProvider.zip =\u0026gt; contains the zipped username   If the data inside the snapshots needs to be encrypted, it can easily be achieved by implementing a custom ISnapshotStorageService and encrypt the data stream before writing to disk.\nBelow is an overview of the most important components:\n ISnapshot =\u0026gt; the actual snapshot object ISnapshotManager =\u0026gt; the snapshot manager with events and management methods ISnapshotProvider =\u0026gt; custom providers that will provide / restore snapshots  Working with snapshot always requires multiple method calls:\n Create a snapshot Add the snapshot to the manager Save the snapshots  Separate methods were introduced to allow full customized usage of the interaction with the snapshots. There are convenient extension methods that merge multiple method calls into a single call.\n\u0026ndash;\nImportant note\nThe base directory will be used as repository. This means that it cannot contain other files and all other files will be deleted from the directory\n\u0026ndash;\nInitializing the snapshot manager Because the snapshot manager is using async, the initialization is a separate method. This gives the developer the option to load the snapshots whenever it is required. To load the stored snapshots from disk, use the code below:\nawait snapshotManager.LoadAsync();  Retrieving a list of all snapshots var snapshots = snapshotManager.Snapshots;  Creating a snapshot Storing information in a snapshot is the responsibility of every single component in the application. The ISnapshotManager will gather all the information for the snapshot providers.\nCall the following method to create a snapshot.\nawait snapshotManager.CreateSnapshotAsync(\u0026quot;My snapshot title\u0026quot;);  Note that a snapshot is only created, not registered in the manager or saved to disk by this method\nProviders Create a provider as shown in the example below:\n// TODO: write an example provider\nRegister the provider in the manager for it to take effect:\nsnapshotManager.AddProvider(myProvider);  Registering a snapshot and saving all snapshots to disk To register a snapshot with the manager, use the code below:\nawait snapshotManager.AddAsync(snapshot);  To save all snapshots, use the code below:\nsnapshotManager.SaveAsync();  "
},
{
	"uri": "http://opensource.wildgums.com/orc.sort/",
	"title": "Orc.Sort",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Sort\nThis library contains various sorting Algorithms.\nTimSort Is taken from https://timsort4net.codeplex.com/\nDocumentation can be found on the original site.\nWe have found TimSort to be significantly faster than the inbuilt QuickSort implementation on generally ordered data (either ascending or descending). It is also nearly as fast on random data.\nNSort Is taken from http://www.codeproject.com/Articles/6033/Sorting-Algorithms-In-C?fid=32969\u0026amp;fr=26#xx0xx\nDocumentation can be found on the original site.\nA generic implementation is also included in this library.\nThese sorting algorithms are more for academic purposes. There are a lot of different types of sorting algorithms implemented, that may come in useful for specific scenarios.\nTopologicalSort Information on Topological Sort can be found here: http://en.wikipedia.org/wiki/Topological_sorting\nNOTE:\nAs shown in the example on the wikipedia page, it is important to realise a DAG may have multiple valid solutions.\nPriorityTopologicalSort Similar to TopologicalSort, except the order in which dependency lists are added to the sort algorithm is important.\nExample:\nDependencyLists: - (1) A, C - (2) B, C  A valid topological result would be \u0026ldquo;B, A, C\u0026rdquo;.\nHowever the priority topological sort will return \u0026ldquo;A, B, C\u0026rdquo; because \u0026ldquo;A\u0026rdquo; appeared in a dependency list before \u0026ldquo;B\u0026rdquo;.\nPlease see the unit tests for more examples.\nNOTE:\nThe dependency structure is expressed by the ordering of the elements in a list. In the previous example \u0026ldquo;A, C\u0026rdquo; means \u0026ldquo;A comes before C\u0026rdquo;.\nIf we had \u0026ldquo;A, B, C, D\u0026rdquo;, this would mean \u0026ldquo;A comes before B, which comes before C, which comes before D\u0026rdquo; or in other words \u0026ldquo;D depends on C, which depends on B, which depends on A\u0026rdquo;.\nTemplateSort This sort algorithm will sort a list based on the values of another list.\nExample:\nSourceCollection = C, B, B, L, N, P, C, A, D, E, B, E TemplateCollection = A, B, C, D SourceCollection.SortAccordingTo(TemplateCollection) Result = A, B, B, B, C, C, D, L, N, P, E, E  If there are items in the list to be sorted that are not in the template list, they simply get appended to the end of the result in the order they are found.\nFeatures  TemplateCollection can be a complex type in which case SortAccordingTo() method will accept a lambda expression to sort by a specific property\nSourceCollection.SortAccordingTo(TemplateCollection, x =\u0026gt; x.SomeProperty)\n You can choose whether to append items that did not have a match at the end of the result or not.\n Implement your own IEqualityComparer\nSourceCollection.SortAccordingTo(TemplateCollection, comparer: StringComparer.CurrentCultureIgnoreCase);\n  Roadmap  Add randomising of collection (total opposite to sorting :)  "
},
{
	"uri": "http://opensource.wildgums.com/orc.squirrel/",
	"title": "Orc.Squirrel",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Squirrel\nIs a library that adds a few extra features on top of Squirrel to allow updates to come from different channels.\nYou can setup \u0026ldquo;Alpha\u0026rdquo;, \u0026ldquo;Beta\u0026rdquo; and \u0026ldquo;Stable\u0026rdquo; channels to release your software through.\nNuGet Packages  [Orc.Squirrel](http://www.nuget.org/packages/Orc.Squirrel/) =\u0026gt; contains an IUpdateService and an UpdateChannel class [Orc.Squirrel.Xaml](http://www.nuget.org/packages/Orc.Squirrel.Xaml/) =\u0026gt; contains an installation notification window  Quick start  Use Squirrel to deploy your software Use UpdateChannel for setting up your update channels Use IUpdateService for handling updates (for your software)  "
},
{
	"uri": "http://opensource.wildgums.com/orc.supportpackage/",
	"title": "Orc.SupportPackage",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.SupportPackage\nCreates support packages of software by gathering relevant information.\nQuick introduction The support package library makes it easy to gather information from any software component in a zip file that can be sent to support engineers.\nBelow is an overview of the most important components:\n ISupportPackageService =\u0026gt; the support package service ISupportPackageProvider =\u0026gt; add custom files / folders to the support package-  Creating a support package By default the support package service gathers system info (using Orc.SystemInfo) and the %AppData% folder of the current user. To create a support package, use the following code:\nawait _supportPackageService.CreateSupportPackage(_saveFileService.FileName);  Adding custom files / folders to a support package It can be very useful to add more than just the %AppData% to a support package (such as a memory dump of the application). In that case the only thing one has to do is create a type implementing the ISupportPackageProvider interface as shown below:\npublic class CustomSupportPackageProvider : SupportPackageProviderBase { public override async Task Provide(ISupportPackageContext supportPackageContext) { Argument.IsNotNull(() =\u0026gt; supportPackageContext); var file = supportPackageContext.GetFile(\u0026quot;testfile.txt\u0026quot;); File.WriteAllText(file, \u0026quot;custom suppport package contents\u0026quot;); } }  The code above will create an additional testfile.txt in the root of the support package.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.systeminfo/",
	"title": "Orc.SystemInfo",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.SystemInfo\nThis library is used to retrieve the system information details from a computer.\nUse the GetSystemInfo() method or the ISystemInfoService to get the system information details.\nGetSystemInfo() returns an IEnumerable\u0026lt;SystemInfoElement\u0026gt;\n[Serializable] public class SystemInfoElement { ... public string Name { get; set; } public string Value { get; set; } ... }  The following information will be retreived:\n User name User domain Machine name OS version OS name Microsoft MaxProcessRAM Architecture ProcessorId Build CPU name Description Address width Data width SpeedMHz BusSpeedMHz Number of cores Number of logical processors System up time Application up time Total memory Available memory Current culture .Net Framework versions\n  Using the service Using the service is easy. Just resolve the service from the ServiceLocator or let it automatically be injected into your services or view model.\nResolving the service If dependency injection is not used, the service can be retrieved using the following code:\nvar systemInfoService = ServiceLocator.Default.ResolveType\u0026lt;ISystemInfoService\u0026gt;();  Retrieving the system info It\u0026rsquo;s best to gather the information on a thread that is not the UI thread. The examples below show how to do this.\nRetrieving on the current thread var systemInfo = systemInfoService.GetSystemInfo(); foreach (var systemInfoElement in systemInfo) { // TODO: Deal with the system info }  Retrieving on a separate thread var systemInfo = await TaskHelper.Run(() =\u0026gt; systemInfoService.GetSystemInfo(), true); foreach (var systemInfoElement in systemInfo) { // TODO: Deal with the system info }  "
},
{
	"uri": "http://opensource.wildgums.com/orc.wizard/",
	"title": "Orc.Wizard",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.Wizard\nEasily create beautifully looking wizards for WPF using MVVM.\nQuick introduction A wizard is a great way to guide users through a process. Every wizard should behave the same, but there is no great out-of-the-box experience in WPF. The wizard included in this library has a few nice features:\n Automatic page management (with everything you expect from next / previous / finish, etc) Automatic (but optional) summary page that gathers all the information from each page to summarize what has been selected inside the wizard Optional pages that allow users to skip to a next page. It is also possible to enforce validation on a wizard page. Nice looking wizard header that is generated automatically based on the accent color\n  In summary, this library allows you to focus on the actual wizard content (the pages), not the wizard itself which is fully taken care of for you.\nCreating wizard pages A wizard page contains of three parts which are explained below.\nCreating the wizard page model The wizard model will hold all the information of the wizard page and return the summary (which is optional).\npublic class PersonWizardPage : WizardPageBase { public PersonWizardPage() { Title = \u0026quot;Person\u0026quot;; Description = \u0026quot;Enter the details of the person\u0026quot;; } public string FirstName { get; set; } public string LastName { get; set; } public override ISummaryItem GetSummary() { return new SummaryItem { Title = \u0026quot;Person\u0026quot;, Summary = string.Format(\u0026quot;{0} {1}\u0026quot;, FirstName, LastName) }; } }  Creating the wizard page view model The view model is responsible for the actual view logic. There can be a lot of stuff in here that is view-specific, as long as the results are stored into the model. This example uses the ViewModelToModel feature of Catel to automatically map the values between the view model and model. As you can see this example even contains validation, so users cannot continue to the next page when the validation does not succeed.\npublic class PersonWizardPageViewModel : WizardPageViewModelBase\u0026lt;PersonWizardPage\u0026gt; { public PersonWizardPageViewModel(PersonWizardPage wizardPage) : base(wizardPage) { } [ViewModelToModel] public string FirstName { get; set; } [ViewModelToModel] public string LastName { get; set; } protected override void ValidateFields(List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { base.ValidateFields(validationResults); if (string.IsNullOrWhiteSpace(FirstName)) { validationResults.Add(FieldValidationResult.CreateError(\u0026quot;FirstName\u0026quot;, \u0026quot;First name is required\u0026quot;)); } if (string.IsNullOrWhiteSpace(LastName)) { validationResults.Add(FieldValidationResult.CreateError(\u0026quot;LastName\u0026quot;, \u0026quot;Last name is required\u0026quot;)); } } }  Creating the wizard page view Below is the xaml view for the wizard page. Note that it\u0026rsquo;s just an ordinary Catel UserControl.\n\u0026lt;catel:UserControl x:Class=\u0026quot;Orc.Wizard.Example.Wizard.Views.PersonWizardPageView\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:mc=\u0026quot;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026quot; xmlns:d=\u0026quot;http://schemas.microsoft.com/expression/blend/2008\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot; mc:Ignorable=\u0026quot;d\u0026quot; d:DesignHeight=\u0026quot;300\u0026quot; d:DesignWidth=\u0026quot;300\u0026quot;\u0026gt; \u0026lt;catel:StackGrid\u0026gt; \u0026lt;Grid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/Grid.ColumnDefinitions\u0026gt; \u0026lt;Grid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/Grid.RowDefinitions\u0026gt; \u0026lt;Label Content=\u0026quot;First name\u0026quot; /\u0026gt; \u0026lt;TextBox Text=\u0026quot;{Binding FirstName, ValidatesOnDataErrors=True, NotifyOnValidationError=True}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;Last name\u0026quot; /\u0026gt; \u0026lt;TextBox Text=\u0026quot;{Binding LastName, ValidatesOnDataErrors=True, NotifyOnValidationError=True}\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid\u0026gt; \u0026lt;/catel:UserControl\u0026gt;  Creating the wizard Once all the wizard pages have been created, it\u0026rsquo;s time to wrap it inside an actual wizard. Below is an example:\npublic class ExampleWizard : WizardBase { public ExampleWizard(ITypeFactory typeFactory) : base(typeFactory) { Title = \u0026quot;Orc.Wizard example\u0026quot;; this.AddPage\u0026lt;PersonWizardPage\u0026gt;(); this.AddPage\u0026lt;AgeWizardPage\u0026gt;(); this.AddPage\u0026lt;SkillsWizardPage\u0026gt;(); this.AddPage\u0026lt;ComponentsWizardPage\u0026gt;(); this.AddPage\u0026lt;SummaryWizardPage\u0026gt;(); } }  Using the wizard Using the wizard can be done via the IWizardService. Below is an example on how to show a wizard:\nawait _wizardService.ShowWizardAsync\u0026lt;ExampleWizard\u0026gt;();  Enjoying the wizard Troubleshooting How to solve TypeNotRegisteredException When you obtain a service object from the service locator, you will write code such as the following:\nvar myService = serviceLocator.ResolveType\u0026lt;IMyService\u0026gt;();  If this causes a TypeNotRegisteredException to be thrown in your project, then the simplest and best solution is to add the Fody add-in LoadAssembliesOnStartup to your project, preferrably via NuGet.\nBackground information: The reason for the TypeNotRegisteredException probably is that you are only using interfaces from this component or Catel.MVVM at this stage. For the .NET runtime, using an interface is not sufficient to load an assembly (such as this component or any of the Catel libraries) into the AppDomain. This means that the assemblies don\u0026rsquo;t get a chance to register their services into the service locator.\nIf for some reason you don\u0026rsquo;t want to use Fody, an alternative solution to achieve the same result is to make sure to use at least one type from this component or Catel.MVVM in your code prior to resolving a service from the service locator. You should be aware, though, that other assemblies may need the same pre-loading as Catel.MVVM, so an automated solution that uses Fody is really the best approach.\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.workspacemanagement/",
	"title": "Orc.WorkspaceManagement",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat    Downloads    Stable version    Unstable version     Find the source at https://github.com/WildGums/Orc.WorkspaceManagement\nManage workspaces the easy way using this library.\nQuick introduction Workspaces are a combination of settings that a user can choose to configure an application. An example is the layout of all docking windows in Visual Studio. The advantage of the workspace management is that it takes away all the plumbing and you can concentrate on the actual usage of workspaces.\nThe workspace management library makes it easy to manage workspaces. The main component is the IWorkspaceManager that contains the current workspace and all available workspaces and allows to load or save workspaces.\nBelow is an overview of the most important components:\n IWorkspace =\u0026gt; the actual workspace object IWorkspaceManager =\u0026gt; the workspace manager with events and management methods IWorkspaceInitializer =\u0026gt; allows customization of initial settings of a workspace  \u0026ndash;\nImportant note\nThe base directory will be used as repository. This means that it cannot contain other files and all other files will be deleted from the directory\n\u0026ndash;\nCreating a workspace initializer When a workspace manager is created, it doesn\u0026rsquo;t contain anything. The IWorkspaceInitializer interface allows the customization of that state.\nBy default the following initializers are available:\n EmptyWorkspaceInitializer =\u0026gt; initializes nothing, this is the default  To create a custom workspace initializer, see the example below:\npublic class WorkspaceInitializer : IWorkspaceInitializer { public Task InitializeAsync(IWorkspace workspace) { workspace.SetValue(\u0026quot;AView.Width\u0026quot;, 200d); workspace.SetValue(\u0026quot;BView.Width\u0026quot;, 200d); return TaskHelper.Completed; } }  Next it can be registered in the ServiceLocator (so it will automatically be injected into the WorkspaceManager):\nServiceLocator.Default.RegisterType\u0026lt;IWorkspaceInitializer, MyWorkspaceInitializer\u0026gt;();  Make sure to register the service before instantiating the IWorkspaceManager because it will be injected\nInitializing the workspace manager Because the workspace manager is using async, the initialization is a separate method. This gives the developer the option to load the workspaces whenever it is required. To read the stored workspaces from disk, use the code below:\nawait workspaceManager.InitializeAsync();  Retrieving a list of all workspaces var workspaces = workspaceManager.Workspaces;  Retrieving the current workspace The library contains extension methods for the IWorkspaceManager to retrieve a typed instance:\nvar myWorkspace = workspaceManager.Workspace;  To customize the location where the workspaces are stored, use the BaseDirectory property.\nStoring information in a workspace Storing information in a workspace is the responsibility of every single component in the application. The IWorkspaceManager will raise the WorkspaceInfoRequested event so every component can put in the required information into the workspace.\nTo store information in a workspace, set the workspace to be updated as current workspace. Then let the user (or software) customize all components. Call the following method to raise the WorkspaceInfoRequested event to update the workspace:\nawait workspaceManager.StoreWorkspaceAsync();  Note that a workspace is only updated, not saved to disk by this method\nProviders Create a provider as shown in the example below:\npublic class RibbonWorkspaceProvider : IWorkspaceProvider { private readonly Ribbon _ribbon; public RibbonWorkspaceProvider(Ribbon ribbon) { Argument.IsNotNull(() =\u0026gt; ribbon); _ribbon = ribbon; } public Task ProvideInformationAsync(IWorkspace workspace) { workspace.SetWorkspaceValue(\u0026quot;Ribbon.IsMinimized\u0026quot;, _ribbon.IsMinimized); return TaskHelper.Completed; } public Task ApplyWorkspaceAsync(IWorkspace workspace) { _ribbon.IsMinimized = workspace.GetWorkspaceValue(\u0026quot;Ribbon.IsMinimized\u0026quot;, false); return TaskHelper.Completed; } }  Then add it to the provider where the ribbon is available:\npublic RibbonView() { InitializeComponent(); var dependencyResolver = this.GetDependencyResolver(); var workspaceManager = dependencyResolver.Resolve\u0026lt;IWorkspaceManager\u0026gt;(); var ribbonWorkspaceProvider = new RibbonWorkspaceProvider(ribbon); workspaceManager.AddProvider(ribbonWorkspaceProvider, true); }  Events Using events is a bit more work, but can accomplish the same:\npublic MyComponent(IWorkspaceManager workspaceManager) { workspaceManager.WorkspaceInfoRequested += OnWorkspaceInfoRequested; } private void OnWorkspaceInfoRequested(object sender, WorkspaceEventArgs e) { var workspace = e.Workspace; workspace.SetWorkspaceValue(\u0026quot;somekey\u0026quot;, \u0026quot;somevalue\u0026quot;); }  Note that this will only be called when storing the workspace, restoring the workspace needs more events\nSaving all workspaces to disk To save all workspaces to disk, use the code below:\nworkspaceManager.Save();  Using the XAML behaviors For the developers using XAML (WPF), behaviors and extension methods are available in the Orc.WorkspaceManagement.Xaml library.\nUsing the extension methods Using the extension methods still requires manual work by subscribing to events of both the view and workspace manager, but allow more control.\nUsing the behaviors The behavior is a wrapper around the extension methods and take away to need to manage anything. The behavior is aware of all the events and will handle everything accordingly. To use the behavior, use the code below:\n\u0026lt;views:BView Grid.Row=\u0026quot;2\u0026quot; Grid.Column=\u0026quot;4\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;behaviors:AutoWorkspace /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/views:BView\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orchestra/",
	"title": "Orchestra",
	"tags": [],
	"description": "",
	"content": "    Name Badge     Chat Downloads   Stable version    Unstable version     Find the source at https://github.com/WildGums/Orchestra\nOrchestra is a composable WPF shell and framework built on top of Catel.\nIt has been in active development for over 5 years (initial commit 2012/06/18) and is used in numerous Line of Business (LoB) applications on a daily basis.\nOrchestra consists of a main shell including an SDK with services that allow developers to communicate with the shell.\nGoals Provide a robust yet flexible LOB shell, designed with best practices in mind, to jump start the development of desktop applications.\nIn other words, we wanted to create a shell that dramatically speeds up the time it takes to release a LOB application to market by enabling developers to concentrate more on the business logic and less on scaffolding.\nAvailable Shells Orchestra provides support for two different shells:\n Fluent ribbon MahApps     Fluent ribbon shell MahApps shell              NuGet packages  Orchestra.Core Orchestra.Shell.Ribbon.Fluent Orchestra.Shell.MahApps  Prerequisites A good working knowledge of Inversion of Control (IoC).\nOrchestra features  Application wide logging with an in app log viewer (CTRL + L) Command manager Shortcut key manager Fluent validation Themeable \u0026lsquo;about box\u0026rsquo; window Themeable splash screen Consistent styling across the whole application  Orchestra + module features We purposely designed Orchestra to be a lightweight shell. However you can \u0026lsquo;super charge\u0026rsquo; it with the following open source libraries: (We use all these libraries with Orchestra. In fact they were designed to work seamlessly with Orchestra. Hint: the libraries all start with Orc.*)\n License management (Orc.LicenseManager) Project management (Orc.ProjectManagement) Automatic updates (Orc.NuGetExplorer Orc.Squirrel) Undo/Redo (Orc.Memento)  You can find the full list here.\nOther similar open source projects  Gemini Wide  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/pinnabletooltips/",
	"title": "PinnableTooltips",
	"tags": [],
	"description": "",
	"content": " This is ToolTip that can be pinned by user.\nInherits from System.Windows.Controls.ContentControl.\nHover the owner control to see the tool tips. Move tool tip to automatically pin it. PinnableToolTip works with asistance of PinnableToolTipService that exposes attached properties to attach tool tips to controls.\nProperties PinnableToolTipService attached properties\n   Property name Description     InitialShowDelay Uses to set initial popup show delay.   IsToolTipOwner Uses to set tool tip owner.   Placement Uses to set tooltip Placement.   PlacementTarget Uses to set tooltip placement target.   ShowDuration Uses to set tooltip duration.   ToolTip Uses to attach tooltip to parent control.    PinnableToolTip\n   Property name Description     AccentColorBrush Gets or sets accent color.   AllowCloseByUser Gets or sets value indicating whether tool tip can be closed by user.   GripColor Gets or sets tool tip grip color.   HorizontalOffset Gets or sets tool tip horizontal offset.   IsOpen Gets value indicating whether tool tip is opened.   IsPinned Gets or sets value whether tool tip is pinned.   Owner Gets or sets ToolTip owner control.   ResizeMode Gets or sets tool tip resize mode.   VerticalOffset Gets or sets tool tip vertical offset.    Events    Event name Description     IsOpenChanged Occurs when tool tip is opened/closed.   IsPinnedChanged Occurs when tool tip is pinned/unpinned.    How to use Use PinnableToolTipService to attach tool tip to owner control.\n\u0026lt;Border BorderThickness=\u0026quot;1\u0026quot; Width=\u0026quot;150\u0026quot;\u0026gt; \u0026lt;TextBlock Text=\u0026quot;{Binding}\u0026quot; Margin=\u0026quot;5\u0026quot;/\u0026gt; \u0026lt;orc:PinnableToolTipService.ToolTip\u0026gt; \u0026lt;orc:PinnableToolTip AllowCloseByUser=\u0026quot;True\u0026quot; ResizeMode=\u0026quot;CanResize\u0026quot; MinWidth=\u0026quot;100\u0026quot; MinHeight=\u0026quot;100\u0026quot; HorizontalOffset=\u0026quot;-12\u0026quot; VerticalOffset=\u0026quot;-12\u0026quot;\u0026gt; \u0026lt;!-- Using a content template allows to delay loading of the inner visual tree, which is much faster --\u0026gt; \u0026lt;orc:PinnableToolTip.ContentTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;Label Content=\u0026quot;this is tool tip\u0026quot; /\u0026gt; \u0026lt;Border Margin=\u0026quot;5\u0026quot; Width=\u0026quot;50\u0026quot; Height=\u0026quot;50\u0026quot; Background=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/orc:PinnableToolTip.ContentTemplate\u0026gt; \u0026lt;/orc:PinnableToolTip\u0026gt; \u0026lt;/orc:PinnableToolTipService.ToolTip\u0026gt; \u0026lt;/Border\u0026gt;  If you pass any control as ToolTip to PinnableToolTipService it will be wrapped by PinnableToolTip.\n\u0026lt;Border BorderThickness=\u0026quot;1\u0026quot; Width=\u0026quot;150\u0026quot;\u0026gt; \u0026lt;TextBlock Text=\u0026quot;{Binding}\u0026quot; Margin=\u0026quot;5\u0026quot;/\u0026gt; \u0026lt;orc:PinnableToolTipService.ToolTip\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;Label Content=\u0026quot;this is tool tip\u0026quot; /\u0026gt; \u0026lt;Border Margin=\u0026quot;5\u0026quot; Width=\u0026quot;50\u0026quot; Height=\u0026quot;50\u0026quot; Background=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/orc:PinnableToolTipService.ToolTip\u0026gt; \u0026lt;/Border\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.prism/module-catalogs/safedirectorymodulecatalog/",
	"title": "SafeDirectoryModuleCatalog",
	"tags": [],
	"description": "",
	"content": " The SafeDirectoryModuleCatalog is a safe implementation of the DirectoryModuleCatalog that ships with prism.\nInitializing the catalog protected override void ConfigureModuleCatalog() { base.ConfigureModuleCatalog(); ModulePath = @\u0026quot;.\\Modules\u0026quot; }  Customizing the catalog No customization options documented yet - feel free to contribute\n"
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/savefilepicker/",
	"title": "SaveFilePicker",
	"tags": [],
	"description": "",
	"content": " This control allows user to choose a directory where a file will be saved.\nInherits from Catel.Windows.Controls.UserControl.\nProperties    Property name Description     Filter Gets or sets filter string that determines what types of files are displayed from the save file dialog.   LabelWidth Gets or sets label width.   LabelText Gets or sets label content.   SelectedFile Gets or sets selected file path.    How to use \u0026lt;orc:SaveFilePicker LabelText=\u0026quot;SaveFilePicker control\u0026quot; LabelWidth=\u0026quot;150\u0026quot; SelectedFile=\u0026quot;{Binding SelectedFile}\u0026quot; Filter=\u0026quot;Image files (*.bmp, *.jpg)|*.bmp;*.jpg|All files (*.*)|*.*\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/stackgrid/",
	"title": "StackGrid",
	"tags": [],
	"description": "",
	"content": " Ever got tired of specifying the Grid.Row and Grid.Column properties on a lot of controls inside a Grid? The StackGrid does the counting for you and takes away this pain.\nInherits from System.Windows.Controls.Grid.\nThe Grid is an excellent control to show several controls in a nice layout on the screen. However, it happens a lot that a grid consists of only 2 or 3 columns, and the first column is for all the labels, and the second one is for controls such as textboxes. You correctly implement all the windows and controls of your application based on user requirements, and then the user decides that he/she wants a row inserted into a grid containing about 20 rows. When this happens, you need to re-define all the row attributes of the grid.\nWith the StackGrid, it is no longer required to define the row and column definitions. The StackGrid can smartly interpret the location of the controls and therefore fill in the Grid.Row and Grid.Column attached properties for you. You need an empty row? No problem, you can use the EmptyRow class to fill up a row for you. You want a column span? No problem, just use the existing Grid.Column attached property and the StackGrid will automatically handle this for you.\nThe StackGrid internally uses a Grid to measure the layout. However, it dynamically loops through its children, and then assigns the Grid.Row and Grid.Column attached properties for the user.\nHow to use \u0026lt;catel:StackGrid\u0026gt; \u0026lt;!-- Row definitions --\u0026gt; \u0026lt;catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; MinHeight=\u0026quot;15\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;!-- Column definitions --\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;!-- Name, will be set to row 0, column 1 and 2 --\u0026gt; \u0026lt;Label Content=\u0026quot;Name\u0026quot; /\u0026gt; \u0026lt;TextBox Text=\u0026quot;Geert van Horrik\u0026quot; /\u0026gt; \u0026lt;!-- Empty row --\u0026gt; \u0026lt;catel:EmptyRow /\u0026gt; \u0026lt;!-- Wrappanel, will span 2 columns --\u0026gt; \u0026lt;WrapPanel Grid.ColumnSpan=\u0026quot;2\u0026quot;\u0026gt; \u0026lt;Button Command=\u0026quot;ApplicationCommands.Close\u0026quot; /\u0026gt; \u0026lt;/WrapPanel\u0026gt; \u0026lt;/catel:StackGrid\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/tabcontrol/",
	"title": "TabControl",
	"tags": [],
	"description": "",
	"content": " The regular TabControl in WPF only supports lazy-loading of the views inside the tabs. The TabControl provided by this library supports lots of different options.\nInherits from System.Windows.Controls.TabControl.\n   Option Description     LazyLoading Load all tabs using lazy loading, but keeps the tabs in memory afterwards.   LazyLoadingUnloadOthers Load all tabs using lazy loading. As soon as a tab is loaded, all other loaded tabs will be unloaded.   EagerLoading Load all tabs as soon as the tab control is loaded.   EagerLoadingOnFirstUse Load all tabs when any of the tabs is used for the first time.    Properties    Property name Description     LoadTabItems Gets or sets load tab items strategy (LazyLoading, LazyLoadingUnloadOthers, EagerLoading or EagerLoadingOnFirstUse);    How to use \u0026lt;orc:TabControl LoadBehavior=\u0026quot;EagerLoading\u0026quot;\u0026gt; \u0026lt;TabItem ... /\u0026gt; \u0026lt;TabItem ... /\u0026gt; \u0026lt;TabItem ... /\u0026gt; \u0026lt;/orc:TabControl\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/timespanpicker/",
	"title": "TimeSpanPicker",
	"tags": [],
	"description": "",
	"content": " This control is used to display and edit TimeSpan values.\nInherits from Catel.Windows.Controls.UserControl.\nBy default it will display the value using the dd.hh:mm:ss format.\nWhen hovering over the control, the tooltip will display the timespan in total number of days, hours and minutes.\nDouble click on any of the d, h, m or s letters, to edit the TimeSpan value with the specified unit of measure. (i.e. days, hours, minutes, seconds)\nProperties    Property name Description     AccentColorBrush Gets or sets accent color.   Value Gets or sets current TimeSpan value.   IsReadonly Gets or sets value indicating whether Value readonly.    How to use TimeSpan Bind a TimeSpan value to the Value property:\n \u0026lt;orc:TimeSpanPicker Value=\u0026quot;{Binding TimeSpanValue}\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/validationcontextcontrol/",
	"title": "ValidationContextControl",
	"tags": [],
	"description": "",
	"content": " This control created to display IValidationContext.\nInherits from Catel.Windows.Controls.UserControl.\nThe IValidationContext container allows querying of all validations of a model (ViewModel) object. So this control can be very useful when user accepting model (viewModel) changes (in dialogs, forms etc).\nProperties    Property name Description     AccentColorBrush Gets or sets accent color.   IsExpandedAllOnStartup Gets or sets value indicating whether all nodes of validation context tree expanded on startup.   ShowButtons Gets or sets whether Open and Copy buttons (see picture above) are visible.   ShowFilterBox Gets or sets whether FilterBox (see picture above) is visible.   ValidationContext Gets or sets displayed validation context.    How to use Bind IValidationContext value to ValidationContext property of control.\n\u0026lt;orc:ValidationContextView x:Name=\u0026quot;validationContextView\u0026quot; ValidationContext=\u0026quot;{Binding ValidationContext}\u0026quot; IsExpandedAllOnStartup=\u0026quot;True\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/orc.controls/watermarktextbox/",
	"title": "WatermarkTextBox",
	"tags": [],
	"description": "",
	"content": " This control will display a watermark in a textbox control when no value is assigned to it. As soon as the user starts typing in the textbox the watermark will disappear.\nInherits from System.Windows.Controls.TextBox.\nThis control is useful to add hints.\nA watermark can contain text or any other control such as images:\nProperties    Property name Description     Watermark The watermark to show, can be either a string or a template    How to use In order to use the simple watermark just set a watermark value to the Watermark property:\n\u0026lt;orc:WatermarkTextBox Watermark=\u0026quot;Textbox with Watermark\u0026quot; /\u0026gt;  In order to add controls or images to the watermark you can define a watermark value like this:\n\u0026lt;orc:WatermarkTextBox\u0026gt; \u0026lt;orc:WatermarkTextBox.Watermark\u0026gt; \u0026lt;StackPanel Orientation=\u0026quot;Horizontal\u0026quot;\u0026gt; \u0026lt;Image Source=\u0026quot;/Resources/Images/email.png\u0026quot; /\u0026gt; \u0026lt;TextBlock Text=\u0026quot;Enter the e-mail\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/orc:WatermarkTextBox.Watermark\u0026gt; \u0026lt;/orc:WatermarkTextBox\u0026gt;  "
},
{
	"uri": "http://opensource.wildgums.com/",
	"title": "WildGums open source center",
	"tags": [],
	"description": "",
	"content": " WildGums open source center Welcome to the WildGums open-source center!\nImagine being in a candy shop. Everywhere you look, there is candy you have been looking for! That\u0026rsquo;s what this centre aims to be for WPF developers. A list of mature, high-quality, free and open source components. Each library can be used on its own, but were designed to work seamlessly together as well.\nThe libraries are actively maintained and developed (new pre-releases on a daily basis, stable versions on a monthly basis).\nThe following platforms are supported:\n .NET 4.5 .NET 4.6 .NET 4.7  Vision WildGums is a company that develops professional WPF and web based applications that look good. When developing software, we are constantly looking out for the best frameworks and components available. A lot of components are hyped, but seem to provide very little added value when digging deeper. One framework that did deliver on its promise is Catel. It\u0026rsquo;s a very mature, well documented, well maintained and feature-rich application development platform.\nOnce we found the core platform to build our applications on, we were still having problems finding high-quality libraries. We have tried several commercial vendors, but found the support to be slow (or lacking). This made us decide it was time for a change\u0026hellip; We were going to develop our own components, giving us control over the quality and throughput.\nSince we started development, it has only confirmed our belief in open source software. It\u0026rsquo;s a great way to get feedback from other developers, allow them to contribute and improve the components in ways we might not even have thought of.\nGoal Our goal is to develop standard compliant, high quality libraries that will allow us and other developers to build applications quickly. (i.e within days, not weeks or months.)\nTo this end we also maintain and develop a WPF/XAML shell called Orchestra, which allows developers to focus on the business logic and less on scaffolding.\nAll our libraries (and applications) fallow the same coding standards and structure, so once you learn how to use one library you will feel right at home with all the others.\nRelease cycle  Stable: every 2 to 3 months (master branch). Prerelease: daily/weekly as required (develop branch).  Example Applications Here are some examples of applications built with Orchestra and other Orc.* libraries:\n   LogViewer Rantt CsvTextEditor FlexGrid     Log viewer Gantt chart application Csv file text editor Data visualizer                LogViewer and CsvTextEditor are open source projects hosted on Github.\nOther commercial applications can be found on our official website WildGums.com.\nContributions Please feel free to contribute, either by:\n Reporting any issues Submitting pull requests Documentation Blogs and tutorials  Services and Consulting If you need help building a new desktop application (whether for internal use within your organization or to release to the public) or need to setup a complete dev ops environment (which will allow you to commit your code and have an new version of your plugin ready for consumption within minutes and automatically applied to your application), please send us an email: contact@wildgums.com\nIt took us a lot of time to get this right. What initially seems like a simple and quick task can end up taking months, so benefit from our experience and save yourself a lot of time, money and frustration.\n"
},
{
	"uri": "http://opensource.wildgums.com/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://opensource.wildgums.com/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "WildGums open source center\n"
}]