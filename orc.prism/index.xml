<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Orc.Prism on WildGums open source center</title><link>http://opensource.wildgums.com/orc.prism/</link><description>Recent content in Orc.Prism on WildGums open source center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://opensource.wildgums.com/orc.prism/index.xml" rel="self" type="application/rss+xml"/><item><title>Using the bootstrapper</title><link>http://opensource.wildgums.com/orc.prism/using-the-bootstrapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://opensource.wildgums.com/orc.prism/using-the-bootstrapper/</guid><description>Orc.Prism offers a basic bootstrapper that uses the ServiceLocator as IoC container. This way, it is really simple to create a prism application using Catel and prism.
The bootstrapper takes lots of work out of hands, and this way a developer can simply focus on what must be done in the bootstrapper (such as registering the right module catalog).
Using the bootstrapper This example shows how the bootstrapper is used to define both the shell and the module catalog that looks for modules in the Modules directory of the application root.</description></item><item><title>Declaring modules</title><link>http://opensource.wildgums.com/orc.prism/declaring-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://opensource.wildgums.com/orc.prism/declaring-modules/</guid><description>When developing a module in Prism, most of the time you need a base class for all the models that contain the IoC container, IRegionManager and more. To make development with prism and Catel as easy as possible, the ModuleBase is included with Orc.Prism. There are two versions of the ModuleBase available, which are described below.
Generic ModuleBase The generic module base allows the end-developer to decide what IoC container is used.</description></item><item><title>Translating or customizing</title><link>http://opensource.wildgums.com/orc.prism/translating-or-customizing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://opensource.wildgums.com/orc.prism/translating-or-customizing/</guid><description>Starting with version 1.0, it is possible to fully customize the bootstrapper tasks. Orc.Prism now uses the IBootstrapperTaskFactory to create the tasks instead of the bootstrapper itself. To customize the logic, one has to implement his/her own version of the IBootstrapperTaskFactory. The easiest way to do this is to derive from the existing BootstrapperTaskFactory and register it in the service locator before the bootstrapper is created.
Customizing the messages The example below customizes the messages that are shown during the initialization tasks.</description></item></channel></rss>